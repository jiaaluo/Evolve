using Evolve.Utils;
using Evolve.Wrappers;
using MelonLoader;
using ButtonApi;
using UnityEngine;
using VRC.Core;
using Evolve.Api;
using System.Collections;
using System.Collections.Generic;
using VRC.SDKBase;
using System.Linq;
using Evolve.ConsoleUtils;
using static VRC.SDKBase.VRC_EventHandler;
using static Evolve.Buttons.RPCMenu;
using static Evolve.Buttons.UdonRPCMenu;
using VRC;
using VRC.Udon;

namespace Evolve.Buttons
{
    internal class ExploitsMenu
    {
        public static QMNestedButton ThisMenu;
        public static QMNestedButton ThisMenu2;
        public static QMNestedButton ThisMenu3;
        public static QMToggleButton QuestLag;
#pragma warning disable CS0649               
        public static QMSingleButton Single1;
#pragma warning restore CS0649               
#pragma warning disable CS0649               
        public static QMSingleButton Single2;
#pragma warning restore CS0649               
#pragma warning disable CS0649               
        public static QMSingleButton Single3;
#pragma warning restore CS0649               
        public static QMSingleButton Single4;
        public static QMSingleButton Single5;
#pragma warning disable CS0649               
        public static QMSingleButton Single6;
#pragma warning restore CS0649               
        public static QMSingleButton Draw1;
        public static QMSingleButton Draw2;
        public static QMSingleButton Draw3;
        public static QMSingleButton Draw4;
        public static QMToggleButton Disconnect;
        public static QMToggleButton MassPortal;
        public static QMSingleButton RPCMenu1;
        public static QMSingleButton RPCMenu2;
        public static QMSingleButton UdonRPCMenu1;
        public static QMSingleButton UdonRPCMenu2;
        public static QMToggleButton GTriggers;
        public static QMToggleButton Invisible;
        public static QMToggleButton GhostMode;
        public static QMToggleButton AntiTheft;
        public static QMToggleButton MaxVelocity;
        public static IEnumerator CheckNewWorld()
        {
            yield return new WaitForSeconds(1);
            try
            {
                List<VRC_Pickup> AllPickups = UnityEngine.Object.FindObjectsOfType<VRC_Pickup>().ToList<VRC_Pickup>();
                bool FoundPens = false;
                foreach (var Pickup in AllPickups)
                {
                    if (Pickup.transform.parent.name.ToLower().Contains("qvpen") && !Pickup.transform.parent.name.ToLower().Contains("eraser"))
                    {
                        Draw1.setIntractable(true);
                        Draw2.setIntractable(true);
                        Draw3.setIntractable(true);
                        Draw4.setIntractable(true);
                        Draw1.setButtonText("Spread\nVirus");
                        Draw2.setButtonText("Spread\nVirus V2");
                        Draw3.setButtonText("Draw\nTornado");
                        Draw4.setButtonText("Draw\nCircles");
                        FoundPens = true;
                    }
                    else if (!FoundPens)
                    {
                        Draw1.setIntractable(false);
                        Draw2.setIntractable(false);
                        Draw3.setIntractable(false);
                        Draw4.setIntractable(false);
                        Draw1.setButtonText("No\nPens");
                        Draw2.setButtonText("No\nPens");
                        Draw3.setButtonText("No\nPens");
                        Draw4.setButtonText("No\nPens");
                    }
                }
            }
            catch { }
        }

        public static void Initialize()
        {
            ThisMenu = new QMNestedButton(EvolveMenu.ThisMenu, 2.5f, 0.25f, "Exploits", "Exploits Menu x_x");
            ThisMenu2 = new QMNestedButton(ThisMenu, 9999, 9999, "", "");
            ThisMenu2.getMainButton().DestroyMe();
            ThisMenu3 = new QMNestedButton(ThisMenu2, 9999, 9999, "", "");
            ThisMenu3.getMainButton().DestroyMe();
            ThisMenu.getMainButton().getGameObject().GetComponent<RectTransform>().sizeDelta /= new Vector3(1, 2);
            Panels.PanelMenu(ThisMenu, 0, 0.3f, "\nRPC & Events:", 1.1f, 2.4F, "RPC & Events");
            Panels.PanelMenu(ThisMenu2, 0, 0.3f, "\nRPC & Events:", 1.1f, 2.4F, "RPC & Events");
            Panels.PanelMenu(ThisMenu3, 0, 0.3f, "\nRPC & Events:", 1.1f, 2.4F, "RPC & Events");
            ArrowsApi.AddArrowUp(ThisMenu.getMenuName(), ThisMenu.getMenuName());
            ArrowsApi.AddArrowDown(ThisMenu.getMenuName(), ThisMenu2.getMenuName());
            ArrowsApi.AddArrowUp(ThisMenu2.getMenuName(), ThisMenu.getMenuName());
            ArrowsApi.AddArrowDown(ThisMenu2.getMenuName(), ThisMenu3.getMenuName());

            RPCMenu1 = new QMSingleButton(ThisMenu, 0, -0.25f, "RPC", () =>
            {
                if (RPCMenu.RPCList.Count > 0)
                {
                    RPCMenu.Refresh();
                    RPCMenu.ThisMenu.OpenMenu();
                }
                else
                {
                    var SerializedRPC = new SerializeRPC
                    {
                        EventType = VrcEventType.SendRPC,
                        Name = "SendRPC",
                        ParameterObject = new GameObject("Object"),
                        ParameterInt = 1,
                        ParameterFloat = 0,
                        ParameterString = "String",
                        ParameterBoolOp = VrcBooleanOp.Unused,
                        Broadcast = VrcBroadcastType.Local
                    };

                    RPCMenu.RPCList.Add(SerializedRPC);
                    RPCMenu.Refresh();
                    RPCMenu.ThisMenu.OpenMenu();
                }
            }, "RPC List");
            RPCMenu1.getGameObject().GetComponent<RectTransform>().sizeDelta /= new Vector2(1, 2);

            UdonRPCMenu1 = new QMSingleButton(ThisMenu, 0, 0.25f, "Udon", () =>
            {
                if (UdonRPCList.Count > 0)
                {
                    UdonRPCMenu.Refresh();
                    UdonRPCMenu.ThisMenu.OpenMenu();
                }
                else
                {
                    var SerializedUdonRPC = new SerializeUdonRPC
                    {
                        EventName = "Name",
                        Player = VRCPlayer.field_Internal_Static_VRCPlayer_0._player,
                    };

                    UdonRPCList.Add(SerializedUdonRPC);
                    UdonRPCMenu.Refresh();
                    UdonRPCMenu.ThisMenu.OpenMenu();
                }
            }, "Udon RPC List");
            UdonRPCMenu1.getGameObject().GetComponent<RectTransform>().sizeDelta /= new Vector2(1, 2);


            RPCMenu2 = new QMSingleButton(ThisMenu2, 0, -0.25f, "RPC", () =>
            {
                if (RPCMenu.RPCList.Count > 0)
                {
                    RPCMenu.Refresh();
                    RPCMenu.ThisMenu.OpenMenu();
                }
                else
                {
                    var SerializedRPC = new SerializeRPC
                    {
                        EventType = VrcEventType.SendRPC,
                        Name = "SendRPC",
                        ParameterObject = new GameObject("Object"),
                        ParameterInt = 1,
                        ParameterFloat = 0,
                        ParameterString = "String",
                        ParameterBoolOp = VrcBooleanOp.Unused,
                        Broadcast = VrcBroadcastType.Local
                    };

                    RPCMenu.RPCList.Add(SerializedRPC);
                    RPCMenu.Refresh();
                    RPCMenu.ThisMenu.OpenMenu();
                }
            }, "RPC List");
            RPCMenu2.getGameObject().GetComponent<RectTransform>().sizeDelta /= new Vector2(1, 2);

            UdonRPCMenu2 = new QMSingleButton(ThisMenu2, 0, 0.25f, "Udon", () =>
            {
                if (UdonRPCList.Count > 0)
                {
                    UdonRPCMenu.Refresh();
                    UdonRPCMenu.ThisMenu.OpenMenu();
                }
                else
                {
                    var SerializedUdonRPC = new SerializeUdonRPC
                    {
                        EventName = "Name",
                        Player = VRCPlayer.field_Internal_Static_VRCPlayer_0._player,
                    };

                    UdonRPCList.Add(SerializedUdonRPC);
                    UdonRPCMenu.Refresh();
                    UdonRPCMenu.ThisMenu.OpenMenu();
                }
            }, "Udon RPC List");
            UdonRPCMenu2.getGameObject().GetComponent<RectTransform>().sizeDelta /= new Vector2(1, 2);

            var RPCMenu3 = new QMSingleButton(ThisMenu3, 0, -0.25f, "RPC", () =>
            {
                if (RPCMenu.RPCList.Count > 0)
                {
                    RPCMenu.Refresh();
                    RPCMenu.ThisMenu.OpenMenu();
                }
                else
                {
                    var SerializedRPC = new SerializeRPC
                    {
                        EventType = VrcEventType.SendRPC,
                        Name = "SendRPC",
                        ParameterObject = new GameObject("Object"),
                        ParameterInt = 1,
                        ParameterFloat = 0,
                        ParameterString = "String",
                        ParameterBoolOp = VrcBooleanOp.Unused,
                        Broadcast = VrcBroadcastType.Local
                    };

                    RPCMenu.RPCList.Add(SerializedRPC);
                    RPCMenu.Refresh();
                    RPCMenu.ThisMenu.OpenMenu();
                }
            }, "RPC List");
            RPCMenu3.getGameObject().GetComponent<RectTransform>().sizeDelta /= new Vector2(1, 2);

            var UdonRPCMenu3 = new QMSingleButton(ThisMenu3, 0, 0.25f, "Udon", () =>
            {
                if (UdonRPCList.Count > 0)
                {
                    UdonRPCMenu.Refresh();
                    UdonRPCMenu.ThisMenu.OpenMenu();
                }
                else
                {
                    var SerializedUdonRPC = new SerializeUdonRPC
                    {
                        EventName = "Name",
                        Player = VRCPlayer.field_Internal_Static_VRCPlayer_0._player,
                    };

                    UdonRPCList.Add(SerializedUdonRPC);
                    UdonRPCMenu.Refresh();
                    UdonRPCMenu.ThisMenu.OpenMenu();
                }
            }, "Udon RPC List");
            UdonRPCMenu3.getGameObject().GetComponent<RectTransform>().sizeDelta /= new Vector2(1, 2);

            Draw4 = new QMSingleButton(ThisMenu, 3, 0, "Draw\nCircles", () =>
            {
                MelonCoroutines.Start(Exploits.Exploits.DrawCircle());
            }, "Draw Circles");

            Single4 = new QMSingleButton(ThisMenu, 4, 2, "Lag Lobby", () =>
            {
                MelonCoroutines.Start(Exploits.Exploits.LobbyLag());
            }, "Lags the room with items");

            Single5 = new QMSingleButton(ThisMenu, 3, 2, "Pedestal\nNuke", () =>
            {
                Exploits.Exploits.ChangePedestals();
            }, "Will change each pedestals in the room to a nuke :o");


            new QMToggleButton(ThisMenu, 2, 0, "Spam\nEmojis", () =>
            {
                Settings.EmojiSpam = true;
            }, "Disabled", () =>
            {
                Settings.EmojiSpam = false;
            }, "brrrrrr");

            new QMToggleButton(ThisMenu, 1, 0, "Spam\nMirrors", () =>
            {
                Settings.SpamMirror = true;
                GTriggers.setToggleState(true, true);
                MelonCoroutines.Start(Exploits.Exploits.SpamMirrors());
                Notifications.Notify("Global triggers enabled");
            }, "Disabled", () =>
            {
                Settings.SpamMirror = false;
                GTriggers.setToggleState(false, true);
                Notifications.Notify("Global triggers disabled");
            }, "Spam Mirrors");

            new QMToggleButton(ThisMenu, 1, 1, "Drop\nPickups", () =>
            {
                Settings.AutoDrop = true;
            }, "Disabled", () =>
            {
                Settings.AutoDrop = false;
            }, "Drop Pickups");

            new QMToggleButton(ThisMenu, 1, 2, "Spam\nPrefabs", () =>
            {
                Settings.SpamPrefabs = true;
            }, "Disabled", () =>
            {
                Settings.SpamPrefabs = false;
            }, "Spam Prefabs");

            new QMToggleButton(ThisMenu, 2, 1, "Orbit\nPickups", () =>
            {
                Settings.ItemsOrbit = true;
                MelonCoroutines.Start(Exploits.Exploits.PickupsOrbit());
            }, "Disabled", () =>
            {
                Settings.ItemsOrbit = false;
            }, "Every pickups in this world will rotate around you.");

            Draw1 = new QMSingleButton(ThisMenu, 3, 1, "Spread\nVirus", () =>
            {
                MelonCoroutines.Start(Exploits.Exploits.SpreadVirus());
            }, "Spread Virus");

            Draw2 = new QMSingleButton(ThisMenu, 4, 1, "Spread\nVirus V2", () =>
            {
                MelonCoroutines.Start(Exploits.Exploits.SpreadVirus2());
            }, "Spread Virus\nV2");

            Draw3 = new QMSingleButton(ThisMenu, 4, 0, "Draw\nTornado", () =>
            {
                MelonCoroutines.Start(Exploits.Exploits.Tornado());
            }, "Draw Tornado");

            Draw1.setIntractable(false);
            Draw2.setIntractable(false);
            Draw3.setIntractable(false);
            Draw4.setIntractable(false);
            Draw1.setButtonText("Need\nPen");
            Draw2.setButtonText("Need\nPen");
            Draw3.setButtonText("Need\nPen");
            Draw4.setButtonText("Need\nPen");


            Invisible = new QMToggleButton(ThisMenu, 2, 2, "<color=#ffb700>Connect\nOnly</color>", () =>
            {
                Settings.InvisibleJoin = true;
                if (Login.Authorization.AccessLevel > 1) Settings.InvisibleJoin = true;
                else
                {
                    Wrappers.Utils.VRCUiPopupManager.ShowAlert("Evolve Engine", "This feature is reserved for VIP users or require an access level of 2");
                    Invisible.setToggleState(false, true);
                }
            }, "Disabled", () =>
            {
                Settings.InvisibleJoin = false;
            }, "Only the master of the room will see you join, you are invisible for everyone else.");
            Invisible.setIntractable(false);

            GTriggers = new QMToggleButton(ThisMenu2, 1, 0, "Global Triggers", () =>
            {
                Settings.WorldTriggers = true;
            }, "Disabled", () =>
            {
                Settings.WorldTriggers = false;
            }, "Global Triggers");

            new QMToggleButton(ThisMenu2, 2, 0, "Frames\ndrop", () =>
            {
                Settings.EmoteLag = true;
            }, "Disabled", () =>
            {
                Settings.EmoteLag = false;
            }, "Will lower everyones frames");

            new QMToggleButton(ThisMenu2, 3, 0, "Menu\nRemover", () =>
            {
                Settings.MenuRemover = true;
                Settings.PortalBypass = true;
            }, "Disabled", () =>
            {
                Settings.PortalBypass = false;
                Settings.MenuRemover = false;
            }, "Others won't be able to click the menu");

            new QMToggleButton(ThisMenu2, 4, 0, "Infinite range\npickups", () =>
            {
                Settings.LongDistancePickups = true;
                MelonCoroutines.Start(Exploits.Exploits.PickupDistance());
            }, "Disabled", () =>
            {
                Settings.LongDistancePickups = false;
            }, "Infinite range when grabbing pickups");

            new QMToggleButton(ThisMenu2, 1, 1, "Steal\npickups", () =>
            {
                Settings.PickupSteal = true;
                MelonCoroutines.Start(Exploits.Exploits.PickupSteal());
            }, "Disabled", () =>
            {
                Settings.PickupSteal = false;
            }, "Steal pickups from other's hand");

            new QMToggleButton(ThisMenu2, 2, 1, "Force Interact pickups", () =>
            {
                Settings.ForceInteractPickups = true;
                MelonCoroutines.Start(Exploits.Exploits.ForceInteractPickups());
            }, "Disabled", () =>
            {
                Settings.ForceInteractPickups = false;
            }, "Force interact with uninteractable pickups");

            new QMToggleButton(ThisMenu2, 3, 1, "Master\nLock room", () =>
            {
                Settings.LockRoom = true;
            }, "Disabled", () =>
            {
                Settings.LockRoom = false;
            }, "Will lock the room if you are the master.");

            Disconnect = new QMToggleButton(ThisMenu2, 4, 1, "<color=#ffb700>Disconnect Master</color>", () =>
            {
                if (Login.Authorization.AccessLevel > 1)
                {
                    Settings.DisconnectMaster = true;
                    MelonCoroutines.Start(Exploits.Exploits.DisconnectMaster());
                    ProtectionsMenu.RPCBlock.setToggleState(true, true);
                    Notifications.Notify("RPC block turned on !");
                    EvoVrConsole.Log(EvoVrConsole.LogsType.Warn, "RPC block turned on ! You can disable it in the <color=magenta>Protections</color> menu");
                }
                else
                {
                    Wrappers.Utils.VRCUiPopupManager.ShowAlert("Evolve Engine", "This feature is reserved for VIP users or require an access level of 2");
                    Disconnect.setToggleState(false, true);
                }
            }, "Disabled", () =>
            {
                Settings.DisconnectMaster = false;
            }, "Disconnect the master of the room when a new player joins the world.");

            MassPortal = new QMToggleButton(ThisMenu2, 1, 2, "<color=#ffb700>Mass\nPortal Drop</color>", () =>
            {
                if (Login.Authorization.AccessLevel > 1)
                {
                    Settings.PortalBypass = true;
                    Settings.MassPortal = true;
                    MelonCoroutines.Start(Exploits.Exploits.MassPortal());
                }
                else
                {
                    Wrappers.Utils.VRCUiPopupManager.ShowAlert("Evolve Engine", "This feature is reserved for VIP users or require an access level of 2");
                    MassPortal.setToggleState(false, true);
                }
            }, "Disabled", () =>
            {
                Settings.PortalBypass = false;
                Settings.MassPortal = false;
            }, "Will drop a lot of portals in the world.");

            GhostMode = new QMToggleButton(ThisMenu2, 2, 2, "<color=#ffb700>Ghost\nMode</color>\n(Beta)", () =>
            {
                if (Login.Authorization.AccessLevel > 1)
                {
                    Settings.GhostMode = true;
                }
                else
                {
                    Wrappers.Utils.VRCUiPopupManager.ShowAlert("Evolve Engine", "This feature is reserved for VIP users or require an access level of 2");
                    GhostMode.setToggleState(false, true);
                }
            }, "Disabled", () =>
            {
                Settings.GhostMode = false;
            }, "People can only see you with an ESP until they block/unblock you if they can.\n[THIS IS IN BETA AND SO YOU MIGHT NOT BE ABLE TO SEE PEOPLE WITHOUT ESP]");

            new QMSingleButton(ThisMenu2, 3, 2, "Invisible\nAvatar", () =>
            {
                Exploits.Exploits.Invisible();
            }, "Be invisible for others");

            new QMSingleButton(ThisMenu2, 4 , 2, "Freefall", () =>
            {
                for (int I = 0; I < Exploits.Exploits.AllPickups.Count; I++)
                {
                    var Pickup = Exploits.Exploits.AllPickups[I];
                    MelonCoroutines.Start(Exploits.Exploits.FreeFallPickup(Pickup, 10));
                }

                for (int I = 0; I < Exploits.Exploits.AllUdonPickups.Count; I++)
                {
                    var Pickup = Exploits.Exploits.AllUdonPickups[I];
                    MelonCoroutines.Start(Exploits.Exploits.FreeFallPickup(Pickup, 10));
                }

                for (int I = 0; I < Exploits.Exploits.AllSyncPickups.Count; I++)
                {
                    var Pickup = Exploits.Exploits.AllSyncPickups[I];
                    Pickup.GetComponent<Rigidbody>().useGravity = true;
                    Pickup.isKinematic = false;
                    Pickup.useGravity = true;
                    MelonCoroutines.Start(Exploits.Exploits.FreeFallPickup(Pickup, 10));
                }
            }, "Makes people fall in the void in some map");

            QuestLag = new QMToggleButton(ThisMenu3, 1, 0, "<color=#ffb700>[WIP]</color>", () =>
            {
                if (Login.Authorization.AccessLevel > 1)
                {
                }
                else
                {
                    Wrappers.Utils.VRCUiPopupManager.ShowAlert("Evolve Engine", "This feature is reserved for VIP users or require an access level of 2");
                    QuestLag.setToggleState(false, true);
                }
            }, "Disabled", () =>
            {
            }, "WIP");

            AntiTheft = new QMToggleButton(ThisMenu3, 2, 0, "<color=#ffb700>Anti Theft</color>", () =>
            {
                if (Login.Authorization.AccessLevel > 1)
                {
                    Settings.AntiTheft = true;
                    Exploits.Exploits.AntiTheft();
                }
                else
                {
                    Wrappers.Utils.VRCUiPopupManager.ShowAlert("Evolve Engine", "This feature is reserved for VIP users or require an access level of 2");
                    AntiTheft.setToggleState(false, true);
                }
            }, "Disabled", () =>
            {
                Settings.AntiTheft = true;

            }, "People won't be able to take pickups from you");

            MaxVelocity = new QMToggleButton(ThisMenu3, 3, 0, "<color=#ffb700>Max pickups\nvelocity</color>", () =>
            {
                if (Login.Authorization.AccessLevel > 1)
                {
                    Settings.MaxVelocity = true;
                    Exploits.Exploits.MaxVelocity();
                }
                else
                {
                    Wrappers.Utils.VRCUiPopupManager.ShowAlert("Evolve Engine", "This feature is reserved for VIP users or require an access level of 2");
                    MaxVelocity.setToggleState(false, true);
                }
            }, "Disabled", () =>
            {
                Settings.MaxVelocity = true;

            }, "Throw pickups super fast");
        }
    }
}